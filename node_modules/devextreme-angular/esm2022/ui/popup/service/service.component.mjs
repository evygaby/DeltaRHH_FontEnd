/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { Component, ElementRef, Inject, NgZone, PLATFORM_ID, TransferState, Type, ViewChild, ViewContainerRef, } from '@angular/core';
import { DxTemplateHost, IterableDifferHelper, NestedOptionHost, WatcherHelper, } from 'devextreme-angular/core';
import { DxPopupComponent } from '../component';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class PopupServiceComponent extends DxPopupComponent {
    contentComponent;
    popupOptions;
    contentContainer;
    contentRef;
    constructor(contentComponent, popupOptions, elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId);
        this.contentComponent = contentComponent;
        this.popupOptions = popupOptions;
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.popupOptions) {
            this.instance.option(this.popupOptions);
        }
        this.contentRef = this.contentContainer.createComponent(this.contentComponent);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PopupServiceComponent, deps: [{ token: 'popupServiceContentComponent' }, { token: 'popupServiceOptions' }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.DxTemplateHost }, { token: i1.WatcherHelper }, { token: i1.IterableDifferHelper }, { token: i1.NestedOptionHost }, { token: i0.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: PopupServiceComponent, isStandalone: true, selector: "ng-component", providers: [
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper,
        ], viewQueries: [{ propertyName: "contentContainer", first: true, predicate: ["dxPopupContentContainer"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: `<ng-container #dxPopupContentContainer></ng-container>`, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: PopupServiceComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    providers: [
                        DxTemplateHost,
                        WatcherHelper,
                        NestedOptionHost,
                        IterableDifferHelper,
                    ],
                    template: `<ng-container #dxPopupContentContainer></ng-container>`,
                }]
        }], ctorParameters: () => [{ type: i0.Type, decorators: [{
                    type: Inject,
                    args: ['popupServiceContentComponent']
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['popupServiceOptions']
                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.DxTemplateHost }, { type: i1.WatcherHelper }, { type: i1.IterableDifferHelper }, { type: i1.NestedOptionHost }, { type: i0.TransferState }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { contentContainer: [{
                type: ViewChild,
                args: ['dxPopupContentContainer', { read: ViewContainerRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9kaXN0L3VpL3BvcHVwL3NlcnZpY2Uvc2VydmljZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxPQUFPLEVBRUwsU0FBUyxFQUVULFVBQVUsRUFDVixNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxhQUFhLEVBQ2IsSUFBSSxFQUNKLFNBQVMsRUFDVCxnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLGNBQWMsRUFDZCxvQkFBb0IsRUFDcEIsZ0JBQWdCLEVBQ2hCLGFBQWEsR0FDZCxNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxjQUFjLENBQUM7OztBQVk5RCxNQUFNLE9BQU8scUJBQXlCLFNBQVEsZ0JBQWdCO0lBTVI7SUFDVDtJQU5xQyxnQkFBZ0IsQ0FBb0I7SUFFcEgsVUFBVSxDQUFrQjtJQUU1QixZQUNvRCxnQkFBeUIsRUFDbEMsWUFBcUMsRUFDNUUsVUFBc0IsRUFDdEIsTUFBYyxFQUNkLFlBQTRCLEVBQzVCLGNBQTZCLEVBQzdCLElBQTBCLEVBQzFCLFVBQTRCLEVBQzVCLGFBQTRCLEVBQ1AsVUFBZTtRQUV0QyxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBWG5ELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUztRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7SUFXaEYsQ0FBQztJQUVELFFBQVE7UUFDTixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakYsQ0FBQzsySEE1QlUscUJBQXFCLGtCQU1wQiw4QkFBOEIsYUFDOUIscUJBQXFCLHlOQVFyQixXQUFXOytHQWZaLHFCQUFxQiwyREFSckI7WUFDVCxjQUFjO1lBQ2QsYUFBYTtZQUNiLGdCQUFnQjtZQUNoQixvQkFBb0I7U0FDckIsa0lBSTZDLGdCQUFnQixrRUFIcEQsd0RBQXdEOzs0RkFFdkQscUJBQXFCO2tCQVZqQyxTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixTQUFTLEVBQUU7d0JBQ1QsY0FBYzt3QkFDZCxhQUFhO3dCQUNiLGdCQUFnQjt3QkFDaEIsb0JBQW9CO3FCQUNyQjtvQkFDRCxRQUFRLEVBQUUsd0RBQXdEO2lCQUNuRTs7MEJBT00sTUFBTTsyQkFBQyw4QkFBOEI7OzBCQUNyQyxNQUFNOzJCQUFDLHFCQUFxQjs7MEJBUTVCLE1BQU07MkJBQUMsV0FBVzt5Q0FkeUQsZ0JBQWdCO3NCQUEvRixTQUFTO3VCQUFDLHlCQUF5QixFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjUuMS4zXG4gKiBCdWlsZCBkYXRlOiBXZWQgSnVuIDI1IDIwMjVcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDI1IERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuaW1wb3J0IHtcclxuICBPbkluaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbXBvbmVudFJlZixcclxuICBFbGVtZW50UmVmLFxyXG4gIEluamVjdCxcclxuICBOZ1pvbmUsXHJcbiAgUExBVEZPUk1fSUQsXHJcbiAgVHJhbnNmZXJTdGF0ZSxcclxuICBUeXBlLFxyXG4gIFZpZXdDaGlsZCxcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIER4VGVtcGxhdGVIb3N0LFxyXG4gIEl0ZXJhYmxlRGlmZmVySGVscGVyLFxyXG4gIE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgV2F0Y2hlckhlbHBlcixcclxufSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4UG9wdXBDb21wb25lbnQsIER4UG9wdXBUeXBlcyB9IGZyb20gJy4uL2NvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgRHhUZW1wbGF0ZUhvc3QsXHJcbiAgICBXYXRjaGVySGVscGVyLFxyXG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgIEl0ZXJhYmxlRGlmZmVySGVscGVyLFxyXG4gIF0sXHJcbiAgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyICNkeFBvcHVwQ29udGVudENvbnRhaW5lcj48L25nLWNvbnRhaW5lcj5gLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9wdXBTZXJ2aWNlQ29tcG9uZW50PFQ+IGV4dGVuZHMgRHhQb3B1cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQFZpZXdDaGlsZCgnZHhQb3B1cENvbnRlbnRDb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYsIHN0YXRpYzogdHJ1ZSB9KSBjb250ZW50Q29udGFpbmVyITogVmlld0NvbnRhaW5lclJlZjtcclxuXHJcbiAgY29udGVudFJlZjogQ29tcG9uZW50UmVmPFQ+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgQEluamVjdCgncG9wdXBTZXJ2aWNlQ29udGVudENvbXBvbmVudCcpIHByaXZhdGUgY29udGVudENvbXBvbmVudDogVHlwZTxUPixcclxuICAgICAgQEluamVjdCgncG9wdXBTZXJ2aWNlT3B0aW9ucycpIHByaXZhdGUgcG9wdXBPcHRpb25zOiBEeFBvcHVwVHlwZXMuUHJvcGVydGllcyxcclxuICAgICAgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgbmdab25lOiBOZ1pvbmUsXHJcbiAgICAgIHRlbXBsYXRlSG9zdDogRHhUZW1wbGF0ZUhvc3QsXHJcbiAgICAgIF93YXRjaGVySGVscGVyOiBXYXRjaGVySGVscGVyLFxyXG4gICAgICBfaWRoOiBJdGVyYWJsZURpZmZlckhlbHBlcixcclxuICAgICAgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSxcclxuICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogYW55LFxyXG4gICkge1xyXG4gICAgc3VwZXIoZWxlbWVudFJlZiwgbmdab25lLCB0ZW1wbGF0ZUhvc3QsIF93YXRjaGVySGVscGVyLCBfaWRoLCBvcHRpb25Ib3N0LCB0cmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgc3VwZXIubmdPbkluaXQoKTtcclxuXHJcbiAgICBpZiAodGhpcy5wb3B1cE9wdGlvbnMpIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5vcHRpb24odGhpcy5wb3B1cE9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29udGVudFJlZiA9IHRoaXMuY29udGVudENvbnRhaW5lci5jcmVhdGVDb21wb25lbnQodGhpcy5jb250ZW50Q29tcG9uZW50KTtcclxuICB9XHJcbn1cclxuIl19