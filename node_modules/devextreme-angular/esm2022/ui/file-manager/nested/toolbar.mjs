/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { DxIntegrationModule, NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiFileManagerFileSelectionItemComponent } from './file-selection-item-dxi';
import { DxiFileManagerItemComponent } from './item-dxi';
import { DxiFileManagerToolbarItemComponent } from './toolbar-item-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoFileManagerToolbarComponent extends NestedOption {
    get fileSelectionItems() {
        return this._getOption('fileSelectionItems');
    }
    set fileSelectionItems(value) {
        this._setOption('fileSelectionItems', value);
    }
    get items() {
        return this._getOption('items');
    }
    set items(value) {
        this._setOption('items', value);
    }
    get _optionPath() {
        return 'toolbar';
    }
    itemsChildren;
    toolbarItemsChildren;
    setItems() {
        const q = new QueryList();
        q.reset([
            ...this.itemsChildren.toArray(),
            ...this.toolbarItemsChildren.toArray(),
        ]);
        this.setChildren('items', q);
    }
    get fileSelectionItemsChildren() {
        return this._getOption('fileSelectionItems');
    }
    set fileSelectionItemsChildren(value) {
        this.setChildren('fileSelectionItems', value);
    }
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
    ngAfterContentInit() {
        this.setItems();
        this.itemsChildren.changes.subscribe(() => { this.setItems(); });
        this.toolbarItemsChildren.changes.subscribe(() => { this.setItems(); });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxoFileManagerToolbarComponent, isStandalone: true, selector: "dxo-file-manager-toolbar", inputs: { fileSelectionItems: "fileSelectionItems", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiFileManagerItemComponent) }, { propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiFileManagerToolbarItemComponent) }, { propertyName: "fileSelectionItemsChildren", predicate: i0.forwardRef(() => DxiFileManagerFileSelectionItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxo-file-manager-toolbar', standalone: true, template: '', imports: [DxIntegrationModule], providers: [NestedOptionHost] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }], propDecorators: { fileSelectionItems: [{
                type: Input
            }], items: [{
                type: Input
            }], itemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFileManagerItemComponent)]
            }], toolbarItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFileManagerToolbarItemComponent)]
            }], fileSelectionItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFileManagerFileSelectionItemComponent)]
            }] } });
export class DxoFileManagerToolbarModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarModule, imports: [DxoFileManagerToolbarComponent], exports: [DxoFileManagerToolbarComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarModule, imports: [DxoFileManagerToolbarComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoFileManagerToolbarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxoFileManagerToolbarComponent
                    ],
                    exports: [
                        DxoFileManagerToolbarComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,