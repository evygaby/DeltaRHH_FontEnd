/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input } from '@angular/core';
import { DxIntegrationModule, NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoDiagramEdgesComponent extends NestedOption {
    get customDataExpr() {
        return this._getOption('customDataExpr');
    }
    set customDataExpr(value) {
        this._setOption('customDataExpr', value);
    }
    get dataSource() {
        return this._getOption('dataSource');
    }
    set dataSource(value) {
        this._setOption('dataSource', value);
    }
    get fromExpr() {
        return this._getOption('fromExpr');
    }
    set fromExpr(value) {
        this._setOption('fromExpr', value);
    }
    get fromLineEndExpr() {
        return this._getOption('fromLineEndExpr');
    }
    set fromLineEndExpr(value) {
        this._setOption('fromLineEndExpr', value);
    }
    get fromPointIndexExpr() {
        return this._getOption('fromPointIndexExpr');
    }
    set fromPointIndexExpr(value) {
        this._setOption('fromPointIndexExpr', value);
    }
    get keyExpr() {
        return this._getOption('keyExpr');
    }
    set keyExpr(value) {
        this._setOption('keyExpr', value);
    }
    get lineTypeExpr() {
        return this._getOption('lineTypeExpr');
    }
    set lineTypeExpr(value) {
        this._setOption('lineTypeExpr', value);
    }
    get lockedExpr() {
        return this._getOption('lockedExpr');
    }
    set lockedExpr(value) {
        this._setOption('lockedExpr', value);
    }
    get pointsExpr() {
        return this._getOption('pointsExpr');
    }
    set pointsExpr(value) {
        this._setOption('pointsExpr', value);
    }
    get styleExpr() {
        return this._getOption('styleExpr');
    }
    set styleExpr(value) {
        this._setOption('styleExpr', value);
    }
    get textExpr() {
        return this._getOption('textExpr');
    }
    set textExpr(value) {
        this._setOption('textExpr', value);
    }
    get textStyleExpr() {
        return this._getOption('textStyleExpr');
    }
    set textStyleExpr(value) {
        this._setOption('textStyleExpr', value);
    }
    get toExpr() {
        return this._getOption('toExpr');
    }
    set toExpr(value) {
        this._setOption('toExpr', value);
    }
    get toLineEndExpr() {
        return this._getOption('toLineEndExpr');
    }
    set toLineEndExpr(value) {
        this._setOption('toLineEndExpr', value);
    }
    get toPointIndexExpr() {
        return this._getOption('toPointIndexExpr');
    }
    set toPointIndexExpr(value) {
        this._setOption('toPointIndexExpr', value);
    }
    get zIndexExpr() {
        return this._getOption('zIndexExpr');
    }
    set zIndexExpr(value) {
        this._setOption('zIndexExpr', value);
    }
    get _optionPath() {
        return 'edges';
    }
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxoDiagramEdgesComponent, isStandalone: true, selector: "dxo-diagram-edges", inputs: { customDataExpr: "customDataExpr", dataSource: "dataSource", fromExpr: "fromExpr", fromLineEndExpr: "fromLineEndExpr", fromPointIndexExpr: "fromPointIndexExpr", keyExpr: "keyExpr", lineTypeExpr: "lineTypeExpr", lockedExpr: "lockedExpr", pointsExpr: "pointsExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", toExpr: "toExpr", toLineEndExpr: "toLineEndExpr", toPointIndexExpr: "toPointIndexExpr", zIndexExpr: "zIndexExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxo-diagram-edges', standalone: true, template: '', imports: [DxIntegrationModule], providers: [NestedOptionHost] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }], propDecorators: { customDataExpr: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], fromExpr: [{
                type: Input
            }], fromLineEndExpr: [{
                type: Input
            }], fromPointIndexExpr: [{
                type: Input
            }], keyExpr: [{
                type: Input
            }], lineTypeExpr: [{
                type: Input
            }], lockedExpr: [{
                type: Input
            }], pointsExpr: [{
                type: Input
            }], styleExpr: [{
                type: Input
            }], textExpr: [{
                type: Input
            }], textStyleExpr: [{
                type: Input
            }], toExpr: [{
                type: Input
            }], toLineEndExpr: [{
                type: Input
            }], toPointIndexExpr: [{
                type: Input
            }], zIndexExpr: [{
                type: Input
            }] } });
export class DxoDiagramEdgesModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesModule, imports: [DxoDiagramEdgesComponent], exports: [DxoDiagramEdgesComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesModule, imports: [DxoDiagramEdgesComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDiagramEdgesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxoDiagramEdgesComponent
                    ],
                    exports: [
                        DxoDiagramEdgesComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,