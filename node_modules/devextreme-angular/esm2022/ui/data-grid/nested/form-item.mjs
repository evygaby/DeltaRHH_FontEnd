/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, ElementRef, Renderer2, Inject, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DxIntegrationModule, NestedOptionHost, extractTemplate, DxTemplateHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiDataGridAsyncRuleComponent } from './async-rule-dxi';
import { DxiDataGridCompareRuleComponent } from './compare-rule-dxi';
import { DxiDataGridCustomRuleComponent } from './custom-rule-dxi';
import { DxiDataGridEmailRuleComponent } from './email-rule-dxi';
import { DxiDataGridNumericRuleComponent } from './numeric-rule-dxi';
import { DxiDataGridPatternRuleComponent } from './pattern-rule-dxi';
import { DxiDataGridRangeRuleComponent } from './range-rule-dxi';
import { DxiDataGridRequiredRuleComponent } from './required-rule-dxi';
import { DxiDataGridStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiDataGridValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoDataGridFormItemComponent extends NestedOption {
    renderer;
    document;
    element;
    get colSpan() {
        return this._getOption('colSpan');
    }
    set colSpan(value) {
        this._setOption('colSpan', value);
    }
    get cssClass() {
        return this._getOption('cssClass');
    }
    set cssClass(value) {
        this._setOption('cssClass', value);
    }
    get dataField() {
        return this._getOption('dataField');
    }
    set dataField(value) {
        this._setOption('dataField', value);
    }
    get editorOptions() {
        return this._getOption('editorOptions');
    }
    set editorOptions(value) {
        this._setOption('editorOptions', value);
    }
    get editorType() {
        return this._getOption('editorType');
    }
    set editorType(value) {
        this._setOption('editorType', value);
    }
    get helpText() {
        return this._getOption('helpText');
    }
    set helpText(value) {
        this._setOption('helpText', value);
    }
    get isRequired() {
        return this._getOption('isRequired');
    }
    set isRequired(value) {
        this._setOption('isRequired', value);
    }
    get itemType() {
        return this._getOption('itemType');
    }
    set itemType(value) {
        this._setOption('itemType', value);
    }
    get label() {
        return this._getOption('label');
    }
    set label(value) {
        this._setOption('label', value);
    }
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    get template() {
        return this._getOption('template');
    }
    set template(value) {
        this._setOption('template', value);
    }
    get validationRules() {
        return this._getOption('validationRules');
    }
    set validationRules(value) {
        this._setOption('validationRules', value);
    }
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    get visibleIndex() {
        return this._getOption('visibleIndex');
    }
    set visibleIndex(value) {
        this._setOption('visibleIndex', value);
    }
    get _optionPath() {
        return 'formItem';
    }
    asyncRulesChildren;
    compareRulesChildren;
    customRulesChildren;
    emailRulesChildren;
    numericRulesChildren;
    patternRulesChildren;
    rangeRulesChildren;
    requiredRulesChildren;
    stringLengthRulesChildren;
    validationRulesChildren;
    setValidationRules() {
        const q = new QueryList();
        q.reset([
            ...this.asyncRulesChildren.toArray(),
            ...this.compareRulesChildren.toArray(),
            ...this.customRulesChildren.toArray(),
            ...this.emailRulesChildren.toArray(),
            ...this.numericRulesChildren.toArray(),
            ...this.patternRulesChildren.toArray(),
            ...this.rangeRulesChildren.toArray(),
            ...this.requiredRulesChildren.toArray(),
            ...this.stringLengthRulesChildren.toArray(),
            ...this.validationRulesChildren.toArray(),
        ]);
        this.setChildren('validationRules', q);
    }
    constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
        super();
        this.renderer = renderer;
        this.document = document;
        this.element = element;
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
        templateHost.setHost(this);
    }
    setTemplate(template) {
        this.template = template;
    }
    ngAfterViewInit() {
        extractTemplate(this, this.element, this.renderer, this.document);
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
    ngAfterContentInit() {
        this.setValidationRules();
        this.asyncRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.compareRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.customRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.emailRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.numericRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.patternRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.rangeRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.requiredRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.stringLengthRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.validationRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: i1.DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxoDataGridFormItemComponent, isStandalone: true, selector: "dxo-data-grid-form-item", inputs: { colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", template: "template", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "asyncRulesChildren", predicate: i0.forwardRef(() => DxiDataGridAsyncRuleComponent) }, { propertyName: "compareRulesChildren", predicate: i0.forwardRef(() => DxiDataGridCompareRuleComponent) }, { propertyName: "customRulesChildren", predicate: i0.forwardRef(() => DxiDataGridCustomRuleComponent) }, { propertyName: "emailRulesChildren", predicate: i0.forwardRef(() => DxiDataGridEmailRuleComponent) }, { propertyName: "numericRulesChildren", predicate: i0.forwardRef(() => DxiDataGridNumericRuleComponent) }, { propertyName: "patternRulesChildren", predicate: i0.forwardRef(() => DxiDataGridPatternRuleComponent) }, { propertyName: "rangeRulesChildren", predicate: i0.forwardRef(() => DxiDataGridRangeRuleComponent) }, { propertyName: "requiredRulesChildren", predicate: i0.forwardRef(() => DxiDataGridRequiredRuleComponent) }, { propertyName: "stringLengthRulesChildren", predicate: i0.forwardRef(() => DxiDataGridStringLengthRuleComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiDataGridValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxo-data-grid-form-item', standalone: true, template: '<ng-content></ng-content>', imports: [DxIntegrationModule], providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.DxTemplateHost, decorators: [{
                    type: Host
                }] }, { type: i0.ElementRef }], propDecorators: { colSpan: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], dataField: [{
                type: Input
            }], editorOptions: [{
                type: Input
            }], editorType: [{
                type: Input
            }], helpText: [{
                type: Input
            }], isRequired: [{
                type: Input
            }], itemType: [{
                type: Input
            }], label: [{
                type: Input
            }], name: [{
                type: Input
            }], template: [{
                type: Input
            }], validationRules: [{
                type: Input
            }], visible: [{
                type: Input
            }], visibleIndex: [{
                type: Input
            }], asyncRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridAsyncRuleComponent)]
            }], compareRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridCompareRuleComponent)]
            }], customRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridCustomRuleComponent)]
            }], emailRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridEmailRuleComponent)]
            }], numericRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridNumericRuleComponent)]
            }], patternRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridPatternRuleComponent)]
            }], rangeRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridRangeRuleComponent)]
            }], requiredRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridRequiredRuleComponent)]
            }], stringLengthRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridStringLengthRuleComponent)]
            }], validationRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiDataGridValidationRuleComponent)]
            }] } });
export class DxoDataGridFormItemModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemModule, imports: [DxoDataGridFormItemComponent], exports: [DxoDataGridFormItemComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemModule, imports: [DxoDataGridFormItemComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoDataGridFormItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxoDataGridFormItemComponent
                    ],
                    exports: [
                        DxoDataGridFormItemComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,