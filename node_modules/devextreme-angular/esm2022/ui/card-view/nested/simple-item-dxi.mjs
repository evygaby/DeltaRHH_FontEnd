/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, ElementRef, Renderer2, Inject, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DxIntegrationModule, NestedOptionHost, extractTemplate, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiCardViewAsyncRuleComponent } from './async-rule-dxi';
import { DxiCardViewCompareRuleComponent } from './compare-rule-dxi';
import { DxiCardViewCustomRuleComponent } from './custom-rule-dxi';
import { DxiCardViewEmailRuleComponent } from './email-rule-dxi';
import { DxiCardViewNumericRuleComponent } from './numeric-rule-dxi';
import { DxiCardViewPatternRuleComponent } from './pattern-rule-dxi';
import { DxiCardViewRangeRuleComponent } from './range-rule-dxi';
import { DxiCardViewRequiredRuleComponent } from './required-rule-dxi';
import { DxiCardViewStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiCardViewValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxiCardViewSimpleItemComponent extends CollectionNestedOption {
    renderer;
    document;
    element;
    get colSpan() {
        return this._getOption('colSpan');
    }
    set colSpan(value) {
        this._setOption('colSpan', value);
    }
    get cssClass() {
        return this._getOption('cssClass');
    }
    set cssClass(value) {
        this._setOption('cssClass', value);
    }
    get dataField() {
        return this._getOption('dataField');
    }
    set dataField(value) {
        this._setOption('dataField', value);
    }
    get editorOptions() {
        return this._getOption('editorOptions');
    }
    set editorOptions(value) {
        this._setOption('editorOptions', value);
    }
    get editorType() {
        return this._getOption('editorType');
    }
    set editorType(value) {
        this._setOption('editorType', value);
    }
    get helpText() {
        return this._getOption('helpText');
    }
    set helpText(value) {
        this._setOption('helpText', value);
    }
    get isRequired() {
        return this._getOption('isRequired');
    }
    set isRequired(value) {
        this._setOption('isRequired', value);
    }
    get itemType() {
        return this._getOption('itemType');
    }
    set itemType(value) {
        this._setOption('itemType', value);
    }
    get label() {
        return this._getOption('label');
    }
    set label(value) {
        this._setOption('label', value);
    }
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    get template() {
        return this._getOption('template');
    }
    set template(value) {
        this._setOption('template', value);
    }
    get validationRules() {
        return this._getOption('validationRules');
    }
    set validationRules(value) {
        this._setOption('validationRules', value);
    }
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    get visibleIndex() {
        return this._getOption('visibleIndex');
    }
    set visibleIndex(value) {
        this._setOption('visibleIndex', value);
    }
    get _optionPath() {
        return 'items';
    }
    asyncRulesChildren;
    compareRulesChildren;
    customRulesChildren;
    emailRulesChildren;
    numericRulesChildren;
    patternRulesChildren;
    rangeRulesChildren;
    requiredRulesChildren;
    stringLengthRulesChildren;
    validationRulesChildren;
    setValidationRules() {
        const q = new QueryList();
        q.reset([
            ...this.asyncRulesChildren.toArray(),
            ...this.compareRulesChildren.toArray(),
            ...this.customRulesChildren.toArray(),
            ...this.emailRulesChildren.toArray(),
            ...this.numericRulesChildren.toArray(),
            ...this.patternRulesChildren.toArray(),
            ...this.rangeRulesChildren.toArray(),
            ...this.requiredRulesChildren.toArray(),
            ...this.stringLengthRulesChildren.toArray(),
            ...this.validationRulesChildren.toArray(),
        ]);
        this.setChildren('validationRules', q);
    }
    constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
        super();
        this.renderer = renderer;
        this.document = document;
        this.element = element;
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
        templateHost.setHost(this);
    }
    setTemplate(template) {
        this.template = template;
    }
    ngAfterViewInit() {
        extractTemplate(this, this.element, this.renderer, this.document);
    }
    ngOnDestroy() {
        this._deleteRemovedOptions(this._fullOptionPath());
    }
    ngAfterContentInit() {
        this.setValidationRules();
        this.asyncRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.compareRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.customRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.emailRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.numericRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.patternRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.rangeRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.requiredRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.stringLengthRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
        this.validationRulesChildren.changes.subscribe(() => { this.setValidationRules(); });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: i1.DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxiCardViewSimpleItemComponent, isStandalone: true, selector: "dxi-card-view-simple-item", inputs: { colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", template: "template", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "asyncRulesChildren", predicate: i0.forwardRef(() => DxiCardViewAsyncRuleComponent) }, { propertyName: "compareRulesChildren", predicate: i0.forwardRef(() => DxiCardViewCompareRuleComponent) }, { propertyName: "customRulesChildren", predicate: i0.forwardRef(() => DxiCardViewCustomRuleComponent) }, { propertyName: "emailRulesChildren", predicate: i0.forwardRef(() => DxiCardViewEmailRuleComponent) }, { propertyName: "numericRulesChildren", predicate: i0.forwardRef(() => DxiCardViewNumericRuleComponent) }, { propertyName: "patternRulesChildren", predicate: i0.forwardRef(() => DxiCardViewPatternRuleComponent) }, { propertyName: "rangeRulesChildren", predicate: i0.forwardRef(() => DxiCardViewRangeRuleComponent) }, { propertyName: "requiredRulesChildren", predicate: i0.forwardRef(() => DxiCardViewRequiredRuleComponent) }, { propertyName: "stringLengthRulesChildren", predicate: i0.forwardRef(() => DxiCardViewStringLengthRuleComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiCardViewValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxi-card-view-simple-item', standalone: true, template: '<ng-content></ng-content>', imports: [DxIntegrationModule], providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.DxTemplateHost, decorators: [{
                    type: Host
                }] }, { type: i0.ElementRef }], propDecorators: { colSpan: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], dataField: [{
                type: Input
            }], editorOptions: [{
                type: Input
            }], editorType: [{
                type: Input
            }], helpText: [{
                type: Input
            }], isRequired: [{
                type: Input
            }], itemType: [{
                type: Input
            }], label: [{
                type: Input
            }], name: [{
                type: Input
            }], template: [{
                type: Input
            }], validationRules: [{
                type: Input
            }], visible: [{
                type: Input
            }], visibleIndex: [{
                type: Input
            }], asyncRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewAsyncRuleComponent)]
            }], compareRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewCompareRuleComponent)]
            }], customRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewCustomRuleComponent)]
            }], emailRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewEmailRuleComponent)]
            }], numericRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewNumericRuleComponent)]
            }], patternRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewPatternRuleComponent)]
            }], rangeRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewRangeRuleComponent)]
            }], requiredRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewRequiredRuleComponent)]
            }], stringLengthRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewStringLengthRuleComponent)]
            }], validationRulesChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiCardViewValidationRuleComponent)]
            }] } });
export class DxiCardViewSimpleItemModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemModule, imports: [DxiCardViewSimpleItemComponent], exports: [DxiCardViewSimpleItemComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemModule, imports: [DxiCardViewSimpleItemComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiCardViewSimpleItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxiCardViewSimpleItemComponent
                    ],
                    exports: [
                        DxiCardViewSimpleItemComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,