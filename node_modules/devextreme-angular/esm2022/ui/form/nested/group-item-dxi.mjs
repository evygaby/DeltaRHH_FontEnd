/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, ElementRef, Renderer2, Inject, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DxIntegrationModule, NestedOptionHost, extractTemplate, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiFormButtonItemComponent } from './button-item-dxi';
import { DxiFormEmptyItemComponent } from './empty-item-dxi';
import { DxiFormItemComponent } from './item-dxi';
import { DxiFormSimpleItemComponent } from './simple-item-dxi';
import { DxiFormTabbedItemComponent } from './tabbed-item-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxiFormGroupItemComponent extends CollectionNestedOption {
    renderer;
    document;
    element;
    get alignItemLabels() {
        return this._getOption('alignItemLabels');
    }
    set alignItemLabels(value) {
        this._setOption('alignItemLabels', value);
    }
    get caption() {
        return this._getOption('caption');
    }
    set caption(value) {
        this._setOption('caption', value);
    }
    get captionTemplate() {
        return this._getOption('captionTemplate');
    }
    set captionTemplate(value) {
        this._setOption('captionTemplate', value);
    }
    get colCount() {
        return this._getOption('colCount');
    }
    set colCount(value) {
        this._setOption('colCount', value);
    }
    get colCountByScreen() {
        return this._getOption('colCountByScreen');
    }
    set colCountByScreen(value) {
        this._setOption('colCountByScreen', value);
    }
    get colSpan() {
        return this._getOption('colSpan');
    }
    set colSpan(value) {
        this._setOption('colSpan', value);
    }
    get cssClass() {
        return this._getOption('cssClass');
    }
    set cssClass(value) {
        this._setOption('cssClass', value);
    }
    get items() {
        return this._getOption('items');
    }
    set items(value) {
        this._setOption('items', value);
    }
    get itemType() {
        return this._getOption('itemType');
    }
    set itemType(value) {
        this._setOption('itemType', value);
    }
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    get template() {
        return this._getOption('template');
    }
    set template(value) {
        this._setOption('template', value);
    }
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    get visibleIndex() {
        return this._getOption('visibleIndex');
    }
    set visibleIndex(value) {
        this._setOption('visibleIndex', value);
    }
    get _optionPath() {
        return 'items';
    }
    buttonItemsChildren;
    emptyItemsChildren;
    groupItemsChildren;
    itemsChildren;
    simpleItemsChildren;
    tabbedItemsChildren;
    setItems() {
        const q = new QueryList();
        q.reset([
            ...this.buttonItemsChildren.toArray(),
            ...this.emptyItemsChildren.toArray(),
            ...this.groupItemsChildren.toArray(),
            ...this.itemsChildren.toArray(),
            ...this.simpleItemsChildren.toArray(),
            ...this.tabbedItemsChildren.toArray(),
        ]);
        this.setChildren('items', q);
    }
    constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
        super();
        this.renderer = renderer;
        this.document = document;
        this.element = element;
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
        templateHost.setHost(this);
    }
    setTemplate(template) {
        this.template = template;
    }
    ngAfterViewInit() {
        extractTemplate(this, this.element, this.renderer, this.document);
    }
    ngOnDestroy() {
        this._deleteRemovedOptions(this._fullOptionPath());
    }
    ngAfterContentInit() {
        this.setItems();
        this.buttonItemsChildren.changes.subscribe(() => { this.setItems(); });
        this.emptyItemsChildren.changes.subscribe(() => { this.setItems(); });
        this.groupItemsChildren.changes.subscribe(() => { this.setItems(); });
        this.itemsChildren.changes.subscribe(() => { this.setItems(); });
        this.simpleItemsChildren.changes.subscribe(() => { this.setItems(); });
        this.tabbedItemsChildren.changes.subscribe(() => { this.setItems(); });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: i1.DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxiFormGroupItemComponent, isStandalone: true, selector: "dxi-form-group-item", inputs: { alignItemLabels: "alignItemLabels", caption: "caption", captionTemplate: "captionTemplate", colCount: "colCount", colCountByScreen: "colCountByScreen", colSpan: "colSpan", cssClass: "cssClass", items: "items", itemType: "itemType", name: "name", template: "template", visible: "visible", visibleIndex: "visibleIndex" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "buttonItemsChildren", predicate: i0.forwardRef(() => DxiFormButtonItemComponent) }, { propertyName: "emptyItemsChildren", predicate: i0.forwardRef(() => DxiFormEmptyItemComponent) }, { propertyName: "groupItemsChildren", predicate: i0.forwardRef(() => DxiFormGroupItemComponent) }, { propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiFormItemComponent) }, { propertyName: "simpleItemsChildren", predicate: i0.forwardRef(() => DxiFormSimpleItemComponent) }, { propertyName: "tabbedItemsChildren", predicate: i0.forwardRef(() => DxiFormTabbedItemComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxi-form-group-item', standalone: true, template: '<ng-content></ng-content>', imports: [DxIntegrationModule], providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.DxTemplateHost, decorators: [{
                    type: Host
                }] }, { type: i0.ElementRef }], propDecorators: { alignItemLabels: [{
                type: Input
            }], caption: [{
                type: Input
            }], captionTemplate: [{
                type: Input
            }], colCount: [{
                type: Input
            }], colCountByScreen: [{
                type: Input
            }], colSpan: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], items: [{
                type: Input
            }], itemType: [{
                type: Input
            }], name: [{
                type: Input
            }], template: [{
                type: Input
            }], visible: [{
                type: Input
            }], visibleIndex: [{
                type: Input
            }], buttonItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormButtonItemComponent)]
            }], emptyItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormEmptyItemComponent)]
            }], groupItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormGroupItemComponent)]
            }], itemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormItemComponent)]
            }], simpleItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormSimpleItemComponent)]
            }], tabbedItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiFormTabbedItemComponent)]
            }] } });
export class DxiFormGroupItemModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemModule, imports: [DxiFormGroupItemComponent], exports: [DxiFormGroupItemComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemModule, imports: [DxiFormGroupItemComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxiFormGroupItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxiFormGroupItemComponent
                    ],
                    exports: [
                        DxiFormGroupItemComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,