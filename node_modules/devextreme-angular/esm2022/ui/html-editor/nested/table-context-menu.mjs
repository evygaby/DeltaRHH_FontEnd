/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { DxIntegrationModule, NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiHtmlEditorItemComponent } from './item-dxi';
import { DxiHtmlEditorTableContextMenuItemComponent } from './table-context-menu-item-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoHtmlEditorTableContextMenuComponent extends NestedOption {
    get enabled() {
        return this._getOption('enabled');
    }
    set enabled(value) {
        this._setOption('enabled', value);
    }
    get items() {
        return this._getOption('items');
    }
    set items(value) {
        this._setOption('items', value);
    }
    get _optionPath() {
        return 'tableContextMenu';
    }
    itemsChildren;
    tableContextMenuItemsChildren;
    setItems() {
        const q = new QueryList();
        q.reset([
            ...this.itemsChildren.toArray(),
            ...this.tableContextMenuItemsChildren.toArray(),
        ]);
        this.setChildren('items', q);
    }
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
    ngAfterContentInit() {
        this.setItems();
        this.itemsChildren.changes.subscribe(() => { this.setItems(); });
        this.tableContextMenuItemsChildren.changes.subscribe(() => { this.setItems(); });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuComponent, deps: [{ token: i1.NestedOptionHost, host: true, skipSelf: true }, { token: i1.NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: DxoHtmlEditorTableContextMenuComponent, isStandalone: true, selector: "dxo-html-editor-table-context-menu", inputs: { enabled: "enabled", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiHtmlEditorItemComponent) }, { propertyName: "tableContextMenuItemsChildren", predicate: i0.forwardRef(() => DxiHtmlEditorTableContextMenuItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""], dependencies: [{ kind: "ngmodule", type: DxIntegrationModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dxo-html-editor-table-context-menu', standalone: true, template: '', imports: [DxIntegrationModule], providers: [NestedOptionHost] }]
        }], ctorParameters: () => [{ type: i1.NestedOptionHost, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }] }, { type: i1.NestedOptionHost, decorators: [{
                    type: Host
                }] }], propDecorators: { enabled: [{
                type: Input
            }], items: [{
                type: Input
            }], itemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiHtmlEditorItemComponent)]
            }], tableContextMenuItemsChildren: [{
                type: ContentChildren,
                args: [forwardRef(() => DxiHtmlEditorTableContextMenuItemComponent)]
            }] } });
export class DxoHtmlEditorTableContextMenuModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuModule, imports: [DxoHtmlEditorTableContextMenuComponent], exports: [DxoHtmlEditorTableContextMenuComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuModule, imports: [DxoHtmlEditorTableContextMenuComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DxoHtmlEditorTableContextMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        DxoHtmlEditorTableContextMenuComponent
                    ],
                    exports: [
                        DxoHtmlEditorTableContextMenuComponent
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,