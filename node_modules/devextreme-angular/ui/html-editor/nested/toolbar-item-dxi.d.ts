/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit, QueryList } from '@angular/core';
import { AICommand, AICommandName, HtmlEditorPredefinedToolbarItem } from 'devextreme/ui/html_editor';
import { LocateInMenuMode, ShowTextMode } from 'devextreme/ui/toolbar';
import { ToolbarItemLocation, ToolbarItemComponent } from 'devextreme/common';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiHtmlEditorCommandComponent } from './command-dxi';
import * as i0 from "@angular/core";
export declare class DxiHtmlEditorToolbarItemComponent extends CollectionNestedOption implements AfterViewInit, IDxTemplateHost {
    private renderer;
    private document;
    private element;
    get acceptedValues(): Array<boolean | number | string>;
    set acceptedValues(value: Array<boolean | number | string>);
    get commands(): Array<AICommand | AICommandName>;
    set commands(value: Array<AICommand | AICommandName>);
    get cssClass(): string | undefined;
    set cssClass(value: string | undefined);
    get disabled(): boolean;
    set disabled(value: boolean);
    get html(): string;
    set html(value: string);
    get locateInMenu(): LocateInMenuMode;
    set locateInMenu(value: LocateInMenuMode);
    get location(): ToolbarItemLocation;
    set location(value: ToolbarItemLocation);
    get menuItemTemplate(): any;
    set menuItemTemplate(value: any);
    get name(): HtmlEditorPredefinedToolbarItem | string | string;
    set name(value: HtmlEditorPredefinedToolbarItem | string | string);
    get options(): any;
    set options(value: any);
    get showText(): ShowTextMode;
    set showText(value: ShowTextMode);
    get template(): any;
    set template(value: any);
    get text(): string;
    set text(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get widget(): ToolbarItemComponent;
    set widget(value: ToolbarItemComponent);
    protected get _optionPath(): string;
    get commandsChildren(): QueryList<DxiHtmlEditorCommandComponent>;
    set commandsChildren(value: QueryList<DxiHtmlEditorCommandComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiHtmlEditorToolbarItemComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiHtmlEditorToolbarItemComponent, "dxi-html-editor-toolbar-item", never, { "acceptedValues": { "alias": "acceptedValues"; "required": false; }; "commands": { "alias": "commands"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "html": { "alias": "html"; "required": false; }; "locateInMenu": { "alias": "locateInMenu"; "required": false; }; "location": { "alias": "location"; "required": false; }; "menuItemTemplate": { "alias": "menuItemTemplate"; "required": false; }; "name": { "alias": "name"; "required": false; }; "options": { "alias": "options"; "required": false; }; "showText": { "alias": "showText"; "required": false; }; "template": { "alias": "template"; "required": false; }; "text": { "alias": "text"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "widget": { "alias": "widget"; "required": false; }; }, {}, ["commandsChildren"], ["*"], true, never>;
}
export declare class DxiHtmlEditorToolbarItemModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiHtmlEditorToolbarItemModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiHtmlEditorToolbarItemModule, never, [typeof DxiHtmlEditorToolbarItemComponent], [typeof DxiHtmlEditorToolbarItemComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiHtmlEditorToolbarItemModule>;
}
