/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit, QueryList, AfterContentInit } from '@angular/core';
import * as CommonTypes from 'devextreme/common';
import { FormItemComponent, FormItemType, LabelLocation } from 'devextreme/ui/form';
import { HorizontalAlignment } from 'devextreme/common';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiCardViewAsyncRuleComponent } from './async-rule-dxi';
import { DxiCardViewCompareRuleComponent } from './compare-rule-dxi';
import { DxiCardViewCustomRuleComponent } from './custom-rule-dxi';
import { DxiCardViewEmailRuleComponent } from './email-rule-dxi';
import { DxiCardViewNumericRuleComponent } from './numeric-rule-dxi';
import { DxiCardViewPatternRuleComponent } from './pattern-rule-dxi';
import { DxiCardViewRangeRuleComponent } from './range-rule-dxi';
import { DxiCardViewRequiredRuleComponent } from './required-rule-dxi';
import { DxiCardViewStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiCardViewValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
export declare class DxiCardViewSimpleItemComponent extends CollectionNestedOption implements AfterViewInit, IDxTemplateHost, AfterContentInit {
    private renderer;
    private document;
    private element;
    get colSpan(): number | undefined;
    set colSpan(value: number | undefined);
    get cssClass(): string | undefined;
    set cssClass(value: string | undefined);
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get editorOptions(): any | undefined;
    set editorOptions(value: any | undefined);
    get editorType(): FormItemComponent;
    set editorType(value: FormItemComponent);
    get helpText(): string | undefined;
    set helpText(value: string | undefined);
    get isRequired(): boolean | undefined;
    set isRequired(value: boolean | undefined);
    get itemType(): FormItemType;
    set itemType(value: FormItemType);
    get label(): {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    };
    set label(value: {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    });
    get name(): string | undefined;
    set name(value: string | undefined);
    get template(): any;
    set template(value: any);
    get validationRules(): Array<CommonTypes.ValidationRule>;
    set validationRules(value: Array<CommonTypes.ValidationRule>);
    get visible(): boolean;
    set visible(value: boolean);
    get visibleIndex(): number | undefined;
    set visibleIndex(value: number | undefined);
    protected get _optionPath(): string;
    asyncRulesChildren: QueryList<DxiCardViewAsyncRuleComponent>;
    compareRulesChildren: QueryList<DxiCardViewCompareRuleComponent>;
    customRulesChildren: QueryList<DxiCardViewCustomRuleComponent>;
    emailRulesChildren: QueryList<DxiCardViewEmailRuleComponent>;
    numericRulesChildren: QueryList<DxiCardViewNumericRuleComponent>;
    patternRulesChildren: QueryList<DxiCardViewPatternRuleComponent>;
    rangeRulesChildren: QueryList<DxiCardViewRangeRuleComponent>;
    requiredRulesChildren: QueryList<DxiCardViewRequiredRuleComponent>;
    stringLengthRulesChildren: QueryList<DxiCardViewStringLengthRuleComponent>;
    validationRulesChildren: QueryList<DxiCardViewValidationRuleComponent>;
    setValidationRules(): void;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewSimpleItemComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiCardViewSimpleItemComponent, "dxi-card-view-simple-item", never, { "colSpan": { "alias": "colSpan"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "dataField": { "alias": "dataField"; "required": false; }; "editorOptions": { "alias": "editorOptions"; "required": false; }; "editorType": { "alias": "editorType"; "required": false; }; "helpText": { "alias": "helpText"; "required": false; }; "isRequired": { "alias": "isRequired"; "required": false; }; "itemType": { "alias": "itemType"; "required": false; }; "label": { "alias": "label"; "required": false; }; "name": { "alias": "name"; "required": false; }; "template": { "alias": "template"; "required": false; }; "validationRules": { "alias": "validationRules"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visibleIndex": { "alias": "visibleIndex"; "required": false; }; }, {}, ["asyncRulesChildren", "compareRulesChildren", "customRulesChildren", "emailRulesChildren", "numericRulesChildren", "patternRulesChildren", "rangeRulesChildren", "requiredRulesChildren", "stringLengthRulesChildren", "validationRulesChildren"], ["*"], true, never>;
}
export declare class DxiCardViewSimpleItemModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewSimpleItemModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiCardViewSimpleItemModule, never, [typeof DxiCardViewSimpleItemComponent], [typeof DxiCardViewSimpleItemComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiCardViewSimpleItemModule>;
}
