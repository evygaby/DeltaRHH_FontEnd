/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit, QueryList, AfterContentInit } from '@angular/core';
import * as CommonTypes from 'devextreme/common';
import { LocateInMenuMode, ShowTextMode } from 'devextreme/ui/toolbar';
import { ToolbarItemLocation, ToolbarItemComponent, HorizontalAlignment, VerticalAlignment } from 'devextreme/common';
import { CardHeaderPredefinedItem, PredefinedToolbarItem } from 'devextreme/ui/card_view';
import { FormItemComponent, FormItemType, LabelLocation, dxFormButtonItem, dxFormEmptyItem, dxFormGroupItem, dxFormSimpleItem, dxFormTabbedItem } from 'devextreme/ui/form';
import { dxTabPanelOptions } from 'devextreme/ui/tab_panel';
import { dxButtonOptions } from 'devextreme/ui/button';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiCardViewAsyncRuleComponent } from './async-rule-dxi';
import { DxiCardViewCompareRuleComponent } from './compare-rule-dxi';
import { DxiCardViewCustomRuleComponent } from './custom-rule-dxi';
import { DxiCardViewEmailRuleComponent } from './email-rule-dxi';
import { DxiCardViewNumericRuleComponent } from './numeric-rule-dxi';
import { DxiCardViewPatternRuleComponent } from './pattern-rule-dxi';
import { DxiCardViewRangeRuleComponent } from './range-rule-dxi';
import { DxiCardViewRequiredRuleComponent } from './required-rule-dxi';
import { DxiCardViewStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiCardViewTabComponent } from './tab-dxi';
import { DxiCardViewValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
export declare class DxiCardViewItemComponent extends CollectionNestedOption implements AfterViewInit, IDxTemplateHost, AfterContentInit {
    private renderer;
    private document;
    private element;
    get cssClass(): string | undefined;
    set cssClass(value: string | undefined);
    get disabled(): boolean;
    set disabled(value: boolean);
    get html(): string;
    set html(value: string);
    get locateInMenu(): LocateInMenuMode;
    set locateInMenu(value: LocateInMenuMode);
    get location(): ToolbarItemLocation;
    set location(value: ToolbarItemLocation);
    get menuItemTemplate(): any;
    set menuItemTemplate(value: any);
    get name(): CardHeaderPredefinedItem | string | undefined | PredefinedToolbarItem;
    set name(value: CardHeaderPredefinedItem | string | undefined | PredefinedToolbarItem);
    get options(): any;
    set options(value: any);
    get showText(): ShowTextMode;
    set showText(value: ShowTextMode);
    get template(): any;
    set template(value: any);
    get text(): string;
    set text(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get widget(): ToolbarItemComponent;
    set widget(value: ToolbarItemComponent);
    get badge(): string;
    set badge(value: string);
    get icon(): string;
    set icon(value: string);
    get tabTemplate(): any;
    set tabTemplate(value: any);
    get title(): string;
    set title(value: string);
    get colSpan(): number | undefined;
    set colSpan(value: number | undefined);
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get editorOptions(): any | undefined;
    set editorOptions(value: any | undefined);
    get editorType(): FormItemComponent;
    set editorType(value: FormItemComponent);
    get helpText(): string | undefined;
    set helpText(value: string | undefined);
    get isRequired(): boolean | undefined;
    set isRequired(value: boolean | undefined);
    get itemType(): FormItemType;
    set itemType(value: FormItemType);
    get label(): {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    };
    set label(value: {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    });
    get validationRules(): Array<CommonTypes.ValidationRule>;
    set validationRules(value: Array<CommonTypes.ValidationRule>);
    get visibleIndex(): number | undefined;
    set visibleIndex(value: number | undefined);
    get alignItemLabels(): boolean;
    set alignItemLabels(value: boolean);
    get caption(): string | undefined;
    set caption(value: string | undefined);
    get captionTemplate(): any;
    set captionTemplate(value: any);
    get colCount(): number;
    set colCount(value: number);
    get colCountByScreen(): {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    };
    set colCountByScreen(value: {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    });
    get items(): Array<dxFormButtonItem | dxFormEmptyItem | dxFormGroupItem | dxFormSimpleItem | dxFormTabbedItem>;
    set items(value: Array<dxFormButtonItem | dxFormEmptyItem | dxFormGroupItem | dxFormSimpleItem | dxFormTabbedItem>);
    get tabPanelOptions(): dxTabPanelOptions | undefined;
    set tabPanelOptions(value: dxTabPanelOptions | undefined);
    get tabs(): {
        alignItemLabels?: boolean;
        badge?: string | undefined;
        colCount?: number;
        colCountByScreen?: {
            lg?: number | undefined;
            md?: number | undefined;
            sm?: number | undefined;
            xs?: number | undefined;
        };
        disabled?: boolean;
        icon?: string | undefined;
        items?: Array<dxFormButtonItem | dxFormEmptyItem | dxFormGroupItem | dxFormSimpleItem | dxFormTabbedItem>;
        tabTemplate?: any;
        template?: any;
        title?: string | undefined;
    }[];
    set tabs(value: {
        alignItemLabels?: boolean;
        badge?: string | undefined;
        colCount?: number;
        colCountByScreen?: {
            lg?: number | undefined;
            md?: number | undefined;
            sm?: number | undefined;
            xs?: number | undefined;
        };
        disabled?: boolean;
        icon?: string | undefined;
        items?: Array<dxFormButtonItem | dxFormEmptyItem | dxFormGroupItem | dxFormSimpleItem | dxFormTabbedItem>;
        tabTemplate?: any;
        template?: any;
        title?: string | undefined;
    }[]);
    get buttonOptions(): dxButtonOptions | undefined;
    set buttonOptions(value: dxButtonOptions | undefined);
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(value: HorizontalAlignment);
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    protected get _optionPath(): string;
    asyncRulesChildren: QueryList<DxiCardViewAsyncRuleComponent>;
    compareRulesChildren: QueryList<DxiCardViewCompareRuleComponent>;
    customRulesChildren: QueryList<DxiCardViewCustomRuleComponent>;
    emailRulesChildren: QueryList<DxiCardViewEmailRuleComponent>;
    numericRulesChildren: QueryList<DxiCardViewNumericRuleComponent>;
    patternRulesChildren: QueryList<DxiCardViewPatternRuleComponent>;
    rangeRulesChildren: QueryList<DxiCardViewRangeRuleComponent>;
    requiredRulesChildren: QueryList<DxiCardViewRequiredRuleComponent>;
    stringLengthRulesChildren: QueryList<DxiCardViewStringLengthRuleComponent>;
    validationRulesChildren: QueryList<DxiCardViewValidationRuleComponent>;
    setValidationRules(): void;
    get tabsChildren(): QueryList<DxiCardViewTabComponent>;
    set tabsChildren(value: QueryList<DxiCardViewTabComponent>);
    get itemsChildren(): QueryList<DxiCardViewItemComponent>;
    set itemsChildren(value: QueryList<DxiCardViewItemComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewItemComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiCardViewItemComponent, "dxi-card-view-item", never, { "cssClass": { "alias": "cssClass"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "html": { "alias": "html"; "required": false; }; "locateInMenu": { "alias": "locateInMenu"; "required": false; }; "location": { "alias": "location"; "required": false; }; "menuItemTemplate": { "alias": "menuItemTemplate"; "required": false; }; "name": { "alias": "name"; "required": false; }; "options": { "alias": "options"; "required": false; }; "showText": { "alias": "showText"; "required": false; }; "template": { "alias": "template"; "required": false; }; "text": { "alias": "text"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "widget": { "alias": "widget"; "required": false; }; "badge": { "alias": "badge"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "tabTemplate": { "alias": "tabTemplate"; "required": false; }; "title": { "alias": "title"; "required": false; }; "colSpan": { "alias": "colSpan"; "required": false; }; "dataField": { "alias": "dataField"; "required": false; }; "editorOptions": { "alias": "editorOptions"; "required": false; }; "editorType": { "alias": "editorType"; "required": false; }; "helpText": { "alias": "helpText"; "required": false; }; "isRequired": { "alias": "isRequired"; "required": false; }; "itemType": { "alias": "itemType"; "required": false; }; "label": { "alias": "label"; "required": false; }; "validationRules": { "alias": "validationRules"; "required": false; }; "visibleIndex": { "alias": "visibleIndex"; "required": false; }; "alignItemLabels": { "alias": "alignItemLabels"; "required": false; }; "caption": { "alias": "caption"; "required": false; }; "captionTemplate": { "alias": "captionTemplate"; "required": false; }; "colCount": { "alias": "colCount"; "required": false; }; "colCountByScreen": { "alias": "colCountByScreen"; "required": false; }; "items": { "alias": "items"; "required": false; }; "tabPanelOptions": { "alias": "tabPanelOptions"; "required": false; }; "tabs": { "alias": "tabs"; "required": false; }; "buttonOptions": { "alias": "buttonOptions"; "required": false; }; "horizontalAlignment": { "alias": "horizontalAlignment"; "required": false; }; "verticalAlignment": { "alias": "verticalAlignment"; "required": false; }; }, {}, ["asyncRulesChildren", "compareRulesChildren", "customRulesChildren", "emailRulesChildren", "numericRulesChildren", "patternRulesChildren", "rangeRulesChildren", "requiredRulesChildren", "stringLengthRulesChildren", "validationRulesChildren", "tabsChildren", "itemsChildren"], ["*"], true, never>;
}
export declare class DxiCardViewItemModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewItemModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiCardViewItemModule, never, [typeof DxiCardViewItemComponent], [typeof DxiCardViewItemComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiCardViewItemModule>;
}
