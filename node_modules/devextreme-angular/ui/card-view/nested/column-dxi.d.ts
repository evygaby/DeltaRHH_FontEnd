/*!
 * devextreme-angular
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter, QueryList, AfterContentInit } from '@angular/core';
import * as CommonTypes from 'devextreme/common';
import { HorizontalAlignment, DataType, SortOrder } from 'devextreme/common';
import { FilterType, ColumnHeaderFilter } from 'devextreme/common/grids';
import { Format } from 'devextreme/common/core/localization';
import { dxFormSimpleItem } from 'devextreme/ui/form';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiCardViewAsyncRuleComponent } from './async-rule-dxi';
import { DxiCardViewCompareRuleComponent } from './compare-rule-dxi';
import { DxiCardViewCustomRuleComponent } from './custom-rule-dxi';
import { DxiCardViewEmailRuleComponent } from './email-rule-dxi';
import { DxiCardViewNumericRuleComponent } from './numeric-rule-dxi';
import { DxiCardViewPatternRuleComponent } from './pattern-rule-dxi';
import { DxiCardViewRangeRuleComponent } from './range-rule-dxi';
import { DxiCardViewRequiredRuleComponent } from './required-rule-dxi';
import { DxiCardViewStringLengthRuleComponent } from './string-length-rule-dxi';
import { DxiCardViewValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
export declare class DxiCardViewColumnComponent extends CollectionNestedOption implements AfterContentInit {
    get alignment(): HorizontalAlignment | undefined;
    set alignment(value: HorizontalAlignment | undefined);
    get allowEditing(): boolean;
    set allowEditing(value: boolean);
    get allowFiltering(): boolean;
    set allowFiltering(value: boolean);
    get allowHeaderFiltering(): boolean;
    set allowHeaderFiltering(value: boolean);
    get allowHiding(): boolean;
    set allowHiding(value: boolean);
    get allowReordering(): boolean;
    set allowReordering(value: boolean);
    get allowSearch(): boolean;
    set allowSearch(value: boolean);
    get allowSorting(): boolean;
    set allowSorting(value: boolean);
    get calculateDisplayValue(): ((cardData: any) => any);
    set calculateDisplayValue(value: ((cardData: any) => any));
    get calculateFieldValue(): ((cardData: any) => any);
    set calculateFieldValue(value: ((cardData: any) => any));
    get calculateFilterExpression(): ((filterValue: any, selectedFilterOperation: string | null, target: string) => string | Array<any> | Function);
    set calculateFilterExpression(value: ((filterValue: any, selectedFilterOperation: string | null, target: string) => string | Array<any> | Function));
    get calculateSortValue(): ((cardData: any) => any) | string;
    set calculateSortValue(value: ((cardData: any) => any) | string);
    get caption(): string | undefined;
    set caption(value: string | undefined);
    get customizeText(): ((fieldInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string);
    set customizeText(value: ((fieldInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string));
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get dataType(): DataType | undefined;
    set dataType(value: DataType | undefined);
    get editorOptions(): any;
    set editorOptions(value: any);
    get falseText(): string;
    set falseText(value: string);
    get fieldCaptionTemplate(): any;
    set fieldCaptionTemplate(value: any);
    get fieldTemplate(): any;
    set fieldTemplate(value: any);
    get fieldValueTemplate(): any;
    set fieldValueTemplate(value: any);
    get filterType(): FilterType;
    set filterType(value: FilterType);
    get filterValue(): any | undefined;
    set filterValue(value: any | undefined);
    get filterValues(): Array<any>;
    set filterValues(value: Array<any>);
    get format(): Format;
    set format(value: Format);
    get formItem(): dxFormSimpleItem;
    set formItem(value: dxFormSimpleItem);
    get headerFilter(): ColumnHeaderFilter | undefined;
    set headerFilter(value: ColumnHeaderFilter | undefined);
    get headerItemCssClass(): string;
    set headerItemCssClass(value: string);
    get headerItemTemplate(): any;
    set headerItemTemplate(value: any);
    get name(): string | undefined;
    set name(value: string | undefined);
    get setFieldValue(): ((newData: any, value: any, currentCardData: any) => any);
    set setFieldValue(value: ((newData: any, value: any, currentCardData: any) => any));
    get showInColumnChooser(): boolean;
    set showInColumnChooser(value: boolean);
    get sortIndex(): number | undefined;
    set sortIndex(value: number | undefined);
    get sortingMethod(): ((value1: any, value2: any) => number) | undefined;
    set sortingMethod(value: ((value1: any, value2: any) => number) | undefined);
    get sortOrder(): SortOrder | undefined;
    set sortOrder(value: SortOrder | undefined);
    get trueText(): string;
    set trueText(value: string);
    get validationRules(): Array<CommonTypes.ValidationRule>;
    set validationRules(value: Array<CommonTypes.ValidationRule>);
    get visible(): boolean;
    set visible(value: boolean);
    get visibleIndex(): number | undefined;
    set visibleIndex(value: number | undefined);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValueChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValuesChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortIndexChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortOrderChange: EventEmitter<SortOrder | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleIndexChange: EventEmitter<number | undefined>;
    protected get _optionPath(): string;
    asyncRulesChildren: QueryList<DxiCardViewAsyncRuleComponent>;
    compareRulesChildren: QueryList<DxiCardViewCompareRuleComponent>;
    customRulesChildren: QueryList<DxiCardViewCustomRuleComponent>;
    emailRulesChildren: QueryList<DxiCardViewEmailRuleComponent>;
    numericRulesChildren: QueryList<DxiCardViewNumericRuleComponent>;
    patternRulesChildren: QueryList<DxiCardViewPatternRuleComponent>;
    rangeRulesChildren: QueryList<DxiCardViewRangeRuleComponent>;
    requiredRulesChildren: QueryList<DxiCardViewRequiredRuleComponent>;
    stringLengthRulesChildren: QueryList<DxiCardViewStringLengthRuleComponent>;
    validationRulesChildren: QueryList<DxiCardViewValidationRuleComponent>;
    setValidationRules(): void;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewColumnComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiCardViewColumnComponent, "dxi-card-view-column", never, { "alignment": { "alias": "alignment"; "required": false; }; "allowEditing": { "alias": "allowEditing"; "required": false; }; "allowFiltering": { "alias": "allowFiltering"; "required": false; }; "allowHeaderFiltering": { "alias": "allowHeaderFiltering"; "required": false; }; "allowHiding": { "alias": "allowHiding"; "required": false; }; "allowReordering": { "alias": "allowReordering"; "required": false; }; "allowSearch": { "alias": "allowSearch"; "required": false; }; "allowSorting": { "alias": "allowSorting"; "required": false; }; "calculateDisplayValue": { "alias": "calculateDisplayValue"; "required": false; }; "calculateFieldValue": { "alias": "calculateFieldValue"; "required": false; }; "calculateFilterExpression": { "alias": "calculateFilterExpression"; "required": false; }; "calculateSortValue": { "alias": "calculateSortValue"; "required": false; }; "caption": { "alias": "caption"; "required": false; }; "customizeText": { "alias": "customizeText"; "required": false; }; "dataField": { "alias": "dataField"; "required": false; }; "dataType": { "alias": "dataType"; "required": false; }; "editorOptions": { "alias": "editorOptions"; "required": false; }; "falseText": { "alias": "falseText"; "required": false; }; "fieldCaptionTemplate": { "alias": "fieldCaptionTemplate"; "required": false; }; "fieldTemplate": { "alias": "fieldTemplate"; "required": false; }; "fieldValueTemplate": { "alias": "fieldValueTemplate"; "required": false; }; "filterType": { "alias": "filterType"; "required": false; }; "filterValue": { "alias": "filterValue"; "required": false; }; "filterValues": { "alias": "filterValues"; "required": false; }; "format": { "alias": "format"; "required": false; }; "formItem": { "alias": "formItem"; "required": false; }; "headerFilter": { "alias": "headerFilter"; "required": false; }; "headerItemCssClass": { "alias": "headerItemCssClass"; "required": false; }; "headerItemTemplate": { "alias": "headerItemTemplate"; "required": false; }; "name": { "alias": "name"; "required": false; }; "setFieldValue": { "alias": "setFieldValue"; "required": false; }; "showInColumnChooser": { "alias": "showInColumnChooser"; "required": false; }; "sortIndex": { "alias": "sortIndex"; "required": false; }; "sortingMethod": { "alias": "sortingMethod"; "required": false; }; "sortOrder": { "alias": "sortOrder"; "required": false; }; "trueText": { "alias": "trueText"; "required": false; }; "validationRules": { "alias": "validationRules"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visibleIndex": { "alias": "visibleIndex"; "required": false; }; }, { "filterValueChange": "filterValueChange"; "filterValuesChange": "filterValuesChange"; "sortIndexChange": "sortIndexChange"; "sortOrderChange": "sortOrderChange"; "visibleChange": "visibleChange"; "visibleIndexChange": "visibleIndexChange"; }, ["asyncRulesChildren", "compareRulesChildren", "customRulesChildren", "emailRulesChildren", "numericRulesChildren", "patternRulesChildren", "rangeRulesChildren", "requiredRulesChildren", "stringLengthRulesChildren", "validationRulesChildren"], never, true, never>;
}
export declare class DxiCardViewColumnModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCardViewColumnModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiCardViewColumnModule, never, [typeof DxiCardViewColumnComponent], [typeof DxiCardViewColumnComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiCardViewColumnModule>;
}
