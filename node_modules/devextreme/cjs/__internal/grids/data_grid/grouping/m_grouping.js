/**
 * DevExtreme (cjs/__internal/grids/data_grid/grouping/m_grouping.js)
 * Version: 23.1.13
 * Build date: Mon Oct 28 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GroupingHeaderPanelExtender = void 0;
var _devices = _interopRequireDefault(require("../../../../core/devices"));
var _renderer = _interopRequireDefault(require("../../../../core/renderer"));
var _deferred = require("../../../../core/utils/deferred");
var _iterator = require("../../../../core/utils/iterator");
var _size = require("../../../../core/utils/size");
var _type = require("../../../../core/utils/type");
var _message = _interopRequireDefault(require("../../../../localization/message"));
var _accessibility = require("../../../../ui/shared/accessibility");
var _m_accessibility = require("../../../grids/grid_core/m_accessibility");
var _m_core = _interopRequireDefault(require("../m_core"));
var _m_data_source_adapter = _interopRequireDefault(require("../m_data_source_adapter"));
var _m_grouping_collapsed = require("./m_grouping_collapsed");
var _m_grouping_expanded = require("./m_grouping_expanded");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var DATAGRID_GROUP_PANEL_CLASS = "dx-datagrid-group-panel";
var DATAGRID_GROUP_PANEL_MESSAGE_CLASS = "dx-group-panel-message";
var DATAGRID_GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
var DATAGRID_GROUP_PANEL_LABEL_CLASS = "dx-toolbar-label";
var DATAGRID_GROUP_PANEL_CONTAINER_CLASS = "dx-toolbar-item";
var DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
var DATAGRID_GROUP_ROW_CLASS = "dx-group-row";
var HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
var dataSourceAdapterExtender = function(Base) {
    return function(_Base) {
        _inheritsLoose(GroupingDataSourceAdapterExtender, _Base);

        function GroupingDataSourceAdapterExtender() {
            return _Base.apply(this, arguments) || this
        }
        var _proto = GroupingDataSourceAdapterExtender.prototype;
        _proto.init = function() {
            _Base.prototype.init.apply(this, arguments);
            this._initGroupingHelper()
        };
        _proto._initGroupingHelper = function(options) {
            var grouping = this._grouping;
            var isAutoExpandAll = this.option("grouping.autoExpandAll");
            var isFocusedRowEnabled = this.option("focusedRowEnabled");
            var remoteOperations = options ? options.remoteOperations : this.remoteOperations();
            var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;
            if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {
                if (!grouping || grouping instanceof _m_grouping_collapsed.GroupingHelper) {
                    this._grouping = new _m_grouping_expanded.GroupingHelper(this)
                }
            } else if (!grouping || grouping instanceof _m_grouping_expanded.GroupingHelper) {
                this._grouping = new _m_grouping_collapsed.GroupingHelper(this)
            }
        };
        _proto.totalItemsCount = function() {
            var totalCount = _Base.prototype.totalItemsCount.call(this);
            return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount
        };
        _proto.itemsCount = function() {
            return this._dataSource.group() ? this._grouping.itemsCount() || 0 : _Base.prototype.itemsCount.apply(this, arguments)
        };
        _proto.allowCollapseAll = function() {
            return this._grouping.allowCollapseAll()
        };
        _proto.isGroupItemCountable = function(item) {
            return this._grouping.isGroupItemCountable(item)
        };
        _proto.isRowExpanded = function(key) {
            var groupInfo = this._grouping.findGroupInfo(key);
            return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()
        };
        _proto.collapseAll = function(groupIndex) {
            return this._collapseExpandAll(groupIndex, false)
        };
        _proto.expandAll = function(groupIndex) {
            return this._collapseExpandAll(groupIndex, true)
        };
        _proto._collapseExpandAll = function(groupIndex, isExpand) {
            var dataSource = this._dataSource;
            var group = dataSource.group();
            var groups = _m_core.default.normalizeSortingInfo(group || []);
            if (groups.length) {
                for (var i = 0; i < groups.length; i++) {
                    if (void 0 === groupIndex || groupIndex === i) {
                        groups[i].isExpanded = isExpand
                    } else if (group && group[i]) {
                        groups[i].isExpanded = group[i].isExpanded
                    }
                }
                dataSource.group(groups);
                this._grouping.foreachGroups((function(groupInfo, parents) {
                    if (void 0 === groupIndex || groupIndex === parents.length - 1) {
                        groupInfo.isExpanded = isExpand
                    }
                }), false, true);
                this.resetPagesCache()
            }
            return true
        };
        _proto.refresh = function() {
            _Base.prototype.refresh.apply(this, arguments);
            return this._grouping.refresh.apply(this._grouping, arguments)
        };
        _proto.changeRowExpand = function(path) {
            var dataSource = this._dataSource;
            if (dataSource.group()) {
                dataSource.beginLoading();
                if (this._lastLoadOptions) {
                    this._lastLoadOptions.groupExpand = true
                }
                return this._changeRowExpandCore(path).always((function() {
                    dataSource.endLoading()
                }))
            }
        };
        _proto._changeRowExpandCore = function(path) {
            return this._grouping.changeRowExpand(path)
        };
        _proto._hasGroupLevelsExpandState = function(group, isExpanded) {
            if (group && Array.isArray(group)) {
                for (var i = 0; i < group.length; i++) {
                    if (group[i].isExpanded === isExpanded) {
                        return true
                    }
                }
            }
        };
        _proto._customizeRemoteOperations = function(options, operationTypes) {
            var remoteOperations = options.remoteOperations;
            if (options.storeLoadOptions.group) {
                if (remoteOperations.grouping && !options.isCustomLoading) {
                    if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {
                        remoteOperations.paging = false
                    }
                }
                if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {
                    remoteOperations.paging = false
                }
            } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {
                this.resetCache()
            }
            _Base.prototype._customizeRemoteOperations.apply(this, arguments)
        };
        _proto._handleDataLoading = function(options) {
            _Base.prototype._handleDataLoading.call(this, options);
            this._initGroupingHelper(options);
            return this._grouping.handleDataLoading(options)
        };
        _proto._handleDataLoaded = function(options) {
            return this._grouping.handleDataLoaded(options, _Base.prototype._handleDataLoaded.bind(this))
        };
        _proto._handleDataLoadedCore = function(options) {
            return this._grouping.handleDataLoadedCore(options, _Base.prototype._handleDataLoadedCore.bind(this))
        };
        return GroupingDataSourceAdapterExtender
    }(Base)
};
_m_data_source_adapter.default.extend(dataSourceAdapterExtender);
var GroupingDataControllerExtender = function(Base) {
    return function(_Base2) {
        _inheritsLoose(GroupingDataControllerExtender, _Base2);

        function GroupingDataControllerExtender() {
            return _Base2.apply(this, arguments) || this
        }
        var _proto2 = GroupingDataControllerExtender.prototype;
        _proto2.init = function() {
            _Base2.prototype.init.call(this);
            this.createAction("onRowExpanding");
            this.createAction("onRowExpanded");
            this.createAction("onRowCollapsing");
            this.createAction("onRowCollapsed")
        };
        _proto2._beforeProcessItems = function(items) {
            var groupColumns = this._columnsController.getGroupColumns();
            items = _Base2.prototype._beforeProcessItems.call(this, items);
            if (items.length && groupColumns.length) {
                items = this._processGroupItems(items, groupColumns.length)
            }
            return items
        };
        _proto2._processItem = function(item, options) {
            if ((0, _type.isDefined)(item.groupIndex) && (0, _type.isString)(item.rowType) && 0 === item.rowType.indexOf("group")) {
                item = this._processGroupItem(item, options);
                options.dataIndex = 0
            } else {
                item = _Base2.prototype._processItem.apply(this, arguments)
            }
            return item
        };
        _proto2._processGroupItem = function(item, options) {
            return item
        };
        _proto2._processGroupItems = function(items, groupsCount, options) {
            var groupedColumns = this._columnsController.getGroupColumns();
            var column = groupedColumns[groupedColumns.length - groupsCount];
            if (!options) {
                var scrollingMode = this.option("scrolling.mode");
                options = {
                    collectContinuationItems: "virtual" !== scrollingMode && "infinite" !== scrollingMode,
                    resultItems: [],
                    path: [],
                    values: []
                }
            }
            var _options = options,
                resultItems = _options.resultItems;
            if (options.data) {
                if (options.collectContinuationItems || !options.data.isContinuation) {
                    resultItems.push({
                        rowType: "group",
                        data: options.data,
                        groupIndex: options.path.length - 1,
                        isExpanded: !!options.data.items,
                        key: options.path.slice(0),
                        values: options.values.slice(0)
                    })
                }
            }
            if (items) {
                if (0 === groupsCount) {
                    resultItems.push.apply(resultItems, items)
                } else {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        if (item && "items" in item) {
                            options.data = item;
                            options.path.push(item.key);
                            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);
                            this._processGroupItems(item.items, groupsCount - 1, options);
                            options.data = void 0;
                            options.path.pop();
                            options.values.pop()
                        } else {
                            resultItems.push(item)
                        }
                    }
                }
            }
            return resultItems
        };
        _proto2.publicMethods = function() {
            return _Base2.prototype.publicMethods.call(this).concat(["collapseAll", "expandAll", "isRowExpanded", "expandRow", "collapseRow"])
        };
        _proto2.collapseAll = function(groupIndex) {
            var dataSource = this._dataSource;
            if (dataSource && dataSource.collapseAll(groupIndex)) {
                dataSource.pageIndex(0);
                dataSource.reload()
            }
        };
        _proto2.expandAll = function(groupIndex) {
            var dataSource = this._dataSource;
            if (dataSource && dataSource.expandAll(groupIndex)) {
                dataSource.pageIndex(0);
                dataSource.reload()
            }
        };
        _proto2.changeRowExpand = function(key) {
            var that = this;
            var expanded = that.isRowExpanded(key);
            var args = {
                key: key,
                expanded: expanded
            };
            that.executeAction(expanded ? "onRowCollapsing" : "onRowExpanding", args);
            if (!args.cancel) {
                return (0, _deferred.when)(that._changeRowExpandCore(key)).done((function() {
                    args.expanded = !expanded;
                    that.executeAction(expanded ? "onRowCollapsed" : "onRowExpanded", args)
                }))
            }
            return (new _deferred.Deferred).resolve()
        };
        _proto2._changeRowExpandCore = function(key) {
            var that = this;
            var dataSource = this._dataSource;
            var d = new _deferred.Deferred;
            if (!dataSource) {
                d.resolve()
            } else {
                (0, _deferred.when)(dataSource.changeRowExpand(key)).done((function() {
                    that.load().done(d.resolve).fail(d.reject)
                })).fail(d.reject)
            }
            return d
        };
        _proto2.isRowExpanded = function(key) {
            var dataSource = this._dataSource;
            return dataSource && dataSource.isRowExpanded(key)
        };
        _proto2.expandRow = function(key) {
            if (!this.isRowExpanded(key)) {
                return this.changeRowExpand(key)
            }
            return (new _deferred.Deferred).resolve()
        };
        _proto2.collapseRow = function(key) {
            if (this.isRowExpanded(key)) {
                return this.changeRowExpand(key)
            }
            return (new _deferred.Deferred).resolve()
        };
        _proto2.optionChanged = function(args) {
            if ("grouping" === args.name) {
                args.name = "dataSource"
            }
            _Base2.prototype.optionChanged.call(this, args)
        };
        return GroupingDataControllerExtender
    }(Base)
};
var onGroupingMenuItemClick = function(column, params) {
    var columnsController = this._columnsController;
    switch (params.itemData.value) {
        case "group":
            var groups = columnsController._dataSource.group() || [];
            columnsController.columnOption(column.dataField, "groupIndex", groups.length);
            break;
        case "ungroup":
            columnsController.columnOption(column.dataField, "groupIndex", -1);
            break;
        case "ungroupAll":
            this.component.clearGrouping()
    }
};
var isGroupPanelVisible = function(groupPanelOptions) {
    var visible = null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.visible;
    return "auto" === visible ? "desktop" === _devices.default.current().deviceType : !!visible
};
var _allowDragging = function(groupPanelOptions, column) {
    var isVisible = isGroupPanelVisible(groupPanelOptions);
    var canDrag = (null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.allowColumnDragging) && column.allowGrouping;
    return isVisible && !!canDrag
};
var GroupingHeaderPanelExtender = function(Base) {
    return function(_Base3) {
        _inheritsLoose(GroupingHeaderPanelExtender, _Base3);

        function GroupingHeaderPanelExtender() {
            return _Base3.apply(this, arguments) || this
        }
        var _proto3 = GroupingHeaderPanelExtender.prototype;
        _proto3._getToolbarItems = function() {
            var items = _Base3.prototype._getToolbarItems.call(this);
            return this._appendGroupingItem(items)
        };
        _proto3._appendGroupingItem = function(items) {
            var _this = this;
            if (this._isGroupPanelVisible()) {
                var isRendered = false;
                var toolbarItem = {
                    template: function() {
                        var $groupPanel = (0, _renderer.default)("<div>").addClass(DATAGRID_GROUP_PANEL_CLASS);
                        _this._updateGroupPanelContent($groupPanel);
                        (0, _m_accessibility.registerKeyboardAction)("groupPanel", _this, $groupPanel, void 0, _this._handleActionKeyDown.bind(_this));
                        return $groupPanel
                    },
                    name: "groupPanel",
                    onItemRendered: function() {
                        isRendered && _this.renderCompleted.fire();
                        isRendered = true
                    },
                    location: "before",
                    locateInMenu: "never",
                    sortIndex: 1
                };
                items.push(toolbarItem);
                this.updateToolbarDimensions()
            }
            return items
        };
        _proto3._handleActionKeyDown = function(args) {
            var event = args.event;
            var $target = (0, _renderer.default)(event.target);
            var groupColumnIndex = $target.closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();
            var column = this._columnsController.getGroupColumns()[groupColumnIndex];
            var columnIndex = column && column.index;
            if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {
                this._headerFilterController.showHeaderFilterMenu(columnIndex, true)
            } else {
                this._processGroupItemAction(columnIndex)
            }
            event.preventDefault()
        };
        _proto3._isGroupPanelVisible = function() {
            return isGroupPanelVisible(this.option("groupPanel"))
        };
        _proto3._renderGroupPanelItems = function($groupPanel, groupColumns) {
            var that = this;
            $groupPanel.empty();
            (0, _iterator.each)(groupColumns, (function(index, groupColumn) {
                that._createGroupPanelItem($groupPanel, groupColumn)
            }));
            (0, _accessibility.restoreFocus)(this)
        };
        _proto3._createGroupPanelItem = function($rootElement, groupColumn) {
            var $groupPanelItem = (0, _renderer.default)("<div>").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data("columnData", groupColumn).appendTo($rootElement).text(groupColumn.caption);
            (0, _accessibility.setTabIndex)(this, $groupPanelItem);
            return $groupPanelItem
        };
        _proto3._columnOptionChanged = function(e) {
            if (!this._requireReady && !_m_core.default.checkChanges(e.optionNames, ["width", "visibleWidth"])) {
                var $toolbarElement = this.element();
                var $groupPanel = $toolbarElement && $toolbarElement.find(".".concat(DATAGRID_GROUP_PANEL_CLASS));
                if ($groupPanel && $groupPanel.length) {
                    this._updateGroupPanelContent($groupPanel);
                    this.updateToolbarDimensions();
                    this.renderCompleted.fire()
                }
            }
            _Base3.prototype._columnOptionChanged.call(this)
        };
        _proto3._updateGroupPanelContent = function($groupPanel) {
            var groupColumns = this.getColumns();
            var groupPanelOptions = this.option("groupPanel");
            this._renderGroupPanelItems($groupPanel, groupColumns);
            if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {
                (0, _renderer.default)("<div>").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);
                $groupPanel.closest(".".concat(DATAGRID_GROUP_PANEL_CONTAINER_CLASS)).addClass(DATAGRID_GROUP_PANEL_LABEL_CLASS);
                $groupPanel.closest(".".concat(DATAGRID_GROUP_PANEL_LABEL_CLASS)).css("maxWidth", "none")
            }
        };
        _proto3.allowDragging = function(column) {
            var groupPanelOptions = this.option("groupPanel");
            return _allowDragging(groupPanelOptions, column)
        };
        _proto3.getColumnElements = function() {
            var $element = this.element();
            return $element && $element.find(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS))
        };
        _proto3.getColumns = function() {
            return this._columnsController.getGroupColumns()
        };
        _proto3.getBoundingRect = function() {
            var $element = this.element();
            if ($element && $element.find(".".concat(DATAGRID_GROUP_PANEL_CLASS)).length) {
                var offset = $element.offset();
                return {
                    top: offset.top,
                    bottom: offset.top + (0, _size.getHeight)($element)
                }
            }
            return null
        };
        _proto3.getName = function() {
            return "group"
        };
        _proto3.getContextMenuItems = function(options) {
            var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
            var $groupedColumnElement = (0, _renderer.default)(options.targetElement).closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS));
            var items;
            if ($groupedColumnElement.length) {
                options.column = $groupedColumnElement.data("columnData")
            }
            if (contextMenuEnabled && options.column) {
                var column = options.column;
                var isGroupingAllowed = (0, _type.isDefined)(column.allowGrouping) ? column.allowGrouping : true;
                if (isGroupingAllowed) {
                    var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;
                    var groupingTexts = this.option("grouping.texts");
                    var onItemClick = onGroupingMenuItemClick.bind(this, column);
                    items = [{
                        text: groupingTexts.ungroup,
                        value: "ungroup",
                        disabled: !isColumnGrouped,
                        onItemClick: onItemClick
                    }, {
                        text: groupingTexts.ungroupAll,
                        value: "ungroupAll",
                        onItemClick: onItemClick
                    }]
                }
            }
            return items
        };
        _proto3.isVisible = function() {
            return _Base3.prototype.isVisible.call(this) || this._isGroupPanelVisible()
        };
        _proto3.hasGroupedColumns = function() {
            return this._isGroupPanelVisible() && !!this.getColumns().length
        };
        _proto3.optionChanged = function(args) {
            if ("groupPanel" === args.name) {
                this._invalidate();
                args.handled = true
            } else {
                _Base3.prototype.optionChanged.call(this, args)
            }
        };
        return GroupingHeaderPanelExtender
    }(Base)
};
exports.GroupingHeaderPanelExtender = GroupingHeaderPanelExtender;
var GroupingRowsViewExtender = function(Base) {
    return function(_Base4) {
        _inheritsLoose(GroupingRowsViewExtender, _Base4);

        function GroupingRowsViewExtender() {
            return _Base4.apply(this, arguments) || this
        }
        var _proto4 = GroupingRowsViewExtender.prototype;
        _proto4.getContextMenuItems = function(options) {
            var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
            var items;
            if (contextMenuEnabled && options.row && "group" === options.row.rowType) {
                var columnsController = this._columnsController;
                var column = columnsController.columnOption("groupIndex:".concat(options.row.groupIndex));
                if (column && column.allowGrouping) {
                    var groupingTexts = this.option("grouping.texts");
                    var onItemClick = onGroupingMenuItemClick.bind(this, column);
                    items = [];
                    items.push({
                        text: groupingTexts.ungroup,
                        value: "ungroup",
                        onItemClick: onItemClick
                    }, {
                        text: groupingTexts.ungroupAll,
                        value: "ungroupAll",
                        onItemClick: onItemClick
                    })
                }
            }
            return items
        };
        _proto4._rowClick = function(e) {
            var expandMode = this.option("grouping.expandMode");
            var scrollingMode = this.option("scrolling.mode");
            var isGroupRowStateChanged = "infinite" !== scrollingMode && "rowClick" === expandMode && (0, _renderer.default)(e.event.target).closest(".".concat(DATAGRID_GROUP_ROW_CLASS)).length;
            var isExpandButtonClicked = (0, _renderer.default)(e.event.target).closest(".".concat(DATAGRID_EXPAND_CLASS)).length;
            if (isGroupRowStateChanged || isExpandButtonClicked) {
                this._changeGroupRowState(e)
            }
            _Base4.prototype._rowClick.call(this, e)
        };
        _proto4._changeGroupRowState = function(e) {
            var row = this._dataController.items()[e.rowIndex];
            var allowCollapsing = this._columnsController.columnOption("groupIndex:".concat(row.groupIndex), "allowCollapsing");
            if ("data" === row.rowType || "group" === row.rowType && false !== allowCollapsing) {
                this._dataController.changeRowExpand(row.key, true);
                e.event.preventDefault();
                e.handled = true
            }
        };
        return GroupingRowsViewExtender
    }(Base)
};
var columnHeadersViewExtender = function(Base) {
    return function(_Base5) {
        _inheritsLoose(GroupingHeadersViewExtender, _Base5);

        function GroupingHeadersViewExtender() {
            return _Base5.apply(this, arguments) || this
        }
        var _proto5 = GroupingHeadersViewExtender.prototype;
        _proto5.getContextMenuItems = function(options) {
            var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
            var items = _Base5.prototype.getContextMenuItems.call(this, options);
            if (contextMenuEnabled && options.row && ("header" === options.row.rowType || "detailAdaptive" === options.row.rowType)) {
                var column = options.column;
                if (!column.command && (!(0, _type.isDefined)(column.allowGrouping) || column.allowGrouping)) {
                    var groupingTexts = this.option("grouping.texts");
                    var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;
                    var onItemClick = onGroupingMenuItemClick.bind(this, column);
                    items = items || [];
                    items.push({
                        text: groupingTexts.groupByThisColumn,
                        value: "group",
                        beginGroup: true,
                        disabled: isColumnGrouped,
                        onItemClick: onItemClick
                    });
                    if (column.showWhenGrouped) {
                        items.push({
                            text: groupingTexts.ungroup,
                            value: "ungroup",
                            disabled: !isColumnGrouped,
                            onItemClick: onItemClick
                        })
                    }
                    items.push({
                        text: groupingTexts.ungroupAll,
                        value: "ungroupAll",
                        onItemClick: onItemClick
                    })
                }
            }
            return items
        };
        _proto5.allowDragging = function(column) {
            var groupPanelOptions = this.option("groupPanel");
            return _allowDragging(groupPanelOptions, column) || _Base5.prototype.allowDragging.call(this, column)
        };
        return GroupingHeadersViewExtender
    }(Base)
};
_m_core.default.registerModule("grouping", {
    defaultOptions: function() {
        return {
            grouping: {
                autoExpandAll: true,
                allowCollapsing: true,
                contextMenuEnabled: false,
                expandMode: "buttonClick",
                texts: {
                    groupContinuesMessage: _message.default.format("dxDataGrid-groupContinuesMessage"),
                    groupContinuedMessage: _message.default.format("dxDataGrid-groupContinuedMessage"),
                    groupByThisColumn: _message.default.format("dxDataGrid-groupHeaderText"),
                    ungroup: _message.default.format("dxDataGrid-ungroupHeaderText"),
                    ungroupAll: _message.default.format("dxDataGrid-ungroupAllText")
                }
            },
            groupPanel: {
                visible: false,
                emptyPanelText: _message.default.format("dxDataGrid-groupPanelEmptyText"),
                allowColumnDragging: true
            }
        }
    },
    extenders: {
        controllers: {
            data: GroupingDataControllerExtender,
            columns: function(Base) {
                return function(_Base6) {
                    _inheritsLoose(GroupingColumnsExtender, _Base6);

                    function GroupingColumnsExtender() {
                        return _Base6.apply(this, arguments) || this
                    }
                    var _proto6 = GroupingColumnsExtender.prototype;
                    _proto6._getExpandColumnOptions = function() {
                        var options = _Base6.prototype._getExpandColumnOptions.apply(this, arguments);
                        options.cellTemplate = _m_core.default.getExpandCellTemplate();
                        return options
                    };
                    return GroupingColumnsExtender
                }(Base)
            },
            editing: function(Base) {
                return function(_Base7) {
                    _inheritsLoose(GroupingEditingExtender, _Base7);

                    function GroupingEditingExtender() {
                        return _Base7.apply(this, arguments) || this
                    }
                    var _proto7 = GroupingEditingExtender.prototype;
                    _proto7._isProcessedItem = function(item) {
                        return (0, _type.isDefined)(item.groupIndex) && (0, _type.isString)(item.rowType) && 0 === item.rowType.indexOf("group")
                    };
                    return GroupingEditingExtender
                }(Base)
            }
        },
        views: {
            headerPanel: GroupingHeaderPanelExtender,
            rowsView: GroupingRowsViewExtender,
            columnHeadersView: columnHeadersViewExtender
        }
    }
});
