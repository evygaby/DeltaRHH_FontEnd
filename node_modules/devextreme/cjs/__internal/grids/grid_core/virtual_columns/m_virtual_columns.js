/**
 * DevExtreme (cjs/__internal/grids/grid_core/virtual_columns/m_virtual_columns.js)
 * Version: 23.1.13
 * Build date: Mon Oct 28 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.virtualColumnsModule = void 0;
var _browser = _interopRequireDefault(require("../../../../core/utils/browser"));
var _size = require("../../../../core/utils/size");
var _type = require("../../../../core/utils/type");
var _window = require("../../../../core/utils/window");
var _m_utils = _interopRequireDefault(require("../m_utils"));
var _m_virtual_columns_core = require("./m_virtual_columns_core");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var DEFAULT_COLUMN_WIDTH = 50;
var baseView = function(Base) {
    return function(_Base) {
        _inheritsLoose(BaseViewVirtualColumnsExtender, _Base);

        function BaseViewVirtualColumnsExtender() {
            return _Base.apply(this, arguments) || this
        }
        var _proto = BaseViewVirtualColumnsExtender.prototype;
        _proto._needToSetCellWidths = function() {
            var result = _Base.prototype._needToSetCellWidths.call(this);
            if (!result && this._columnsController.isVirtualMode()) {
                var _columns = this._columnsController.getColumns();
                result = _columns.some((function(column) {
                    return "auto" === column.width
                }))
            }
            return result
        };
        return BaseViewVirtualColumnsExtender
    }(Base)
};
var rowsView = function(Base) {
    return function(_baseView) {
        _inheritsLoose(VirtualColumnsRowsViewExtender, _baseView);

        function VirtualColumnsRowsViewExtender() {
            return _baseView.apply(this, arguments) || this
        }
        var _proto2 = VirtualColumnsRowsViewExtender.prototype;
        _proto2._resizeCore = function() {
            _baseView.prototype._resizeCore.apply(this, arguments);
            this._columnsController.resize()
        };
        _proto2._handleScroll = function(e) {
            var that = this;
            var scrollable = this.getScrollable();
            var left = e.scrollOffset.left;
            _baseView.prototype._handleScroll.apply(that, arguments);
            if (that.option("rtlEnabled") && scrollable) {
                left = (0, _size.getWidth)(scrollable.$content()) - (0, _size.getWidth)(scrollable.$element()) - left
            }
            that._columnsController.setScrollPosition(left)
        };
        _proto2._renderCore = function(e) {
            var _this = this;
            var _a, _b;
            if (null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling) {
                var $contentElement = this._findContentElement();
                var fixedColumns = null === (_a = this._columnsController) || void 0 === _a ? void 0 : _a.getFixedColumns();
                var useNativeScrolling = null === (_b = this._scrollable) || void 0 === _b ? void 0 : _b.option("useNative");
                if (null === fixedColumns || void 0 === fixedColumns ? void 0 : fixedColumns.length) {
                    $contentElement.css({
                        minHeight: useNativeScrolling ? (0, _size.getHeight)($contentElement) : _m_utils.default.getContentHeightLimit(_browser.default)
                    });
                    var resizeCompletedHandler = function resizeCompletedHandler() {
                        _this.resizeCompleted.remove(resizeCompletedHandler);
                        $contentElement.css({
                            minHeight: ""
                        })
                    };
                    this.resizeCompleted.add(resizeCompletedHandler)
                }
            }
            return _baseView.prototype._renderCore.apply(this, arguments)
        };
        return VirtualColumnsRowsViewExtender
    }(baseView(Base))
};
var columnHeadersView = function(Base) {
    return function(_baseView2) {
        _inheritsLoose(VirtualColumnsColumnHeaderViewExtender, _baseView2);

        function VirtualColumnsColumnHeaderViewExtender() {
            return _baseView2.apply(this, arguments) || this
        }
        var _proto3 = VirtualColumnsColumnHeaderViewExtender.prototype;
        _proto3._renderCore = function() {
            var deferred = _baseView2.prototype._renderCore.apply(this, arguments);
            if (this._columnsController.isVirtualMode()) {
                this._updateScrollLeftPosition()
            }
            return deferred
        };
        return VirtualColumnsColumnHeaderViewExtender
    }(baseView(Base))
};
var getWidths = function(columns) {
    return columns.map((function(column) {
        return column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH
    }))
};
var columns = function(Base) {
    return function(_Base2) {
        _inheritsLoose(VirtualColumnsControllerExtender, _Base2);

        function VirtualColumnsControllerExtender() {
            return _Base2.apply(this, arguments) || this
        }
        var _proto4 = VirtualColumnsControllerExtender.prototype;
        _proto4.init = function() {
            var _a;
            var that = this;
            _Base2.prototype.init.apply(this, arguments);
            this._resizingController = this.getController("resizing");
            that._beginPageIndex = null;
            that._endPageIndex = null;
            null !== (_a = that._position) && void 0 !== _a ? _a : that._position = 0;
            that._virtualVisibleColumns = {}
        };
        _proto4.dispose = function() {
            clearTimeout(this._changedTimeout);
            _Base2.prototype.dispose.apply(this, arguments)
        };
        _proto4.resetColumnsCache = function() {
            _Base2.prototype.resetColumnsCache.call(this);
            this._virtualVisibleColumns = {}
        };
        _proto4.getBeginPageIndex = function(position) {
            var visibleColumns = this.getVisibleColumns(void 0, true);
            var widths = getWidths(visibleColumns);
            var currentPosition = 0;
            for (var index = 0; index < widths.length; index++) {
                if (currentPosition >= position) {
                    return Math.floor(index / this.getColumnPageSize())
                }
                currentPosition += widths[index]
            }
            return 0
        };
        _proto4.getTotalWidth = function() {
            var width = this.option("width");
            if ("number" === typeof width) {
                return width
            }
            return this._resizingController._lastWidth || (0, _size.getOuterWidth)(this.component.$element())
        };
        _proto4.getEndPageIndex = function(position) {
            var visibleColumns = this.getVisibleColumns(void 0, true);
            var widths = getWidths(visibleColumns);
            var currentPosition = 0;
            position += this.getTotalWidth();
            for (var index = 0; index < widths.length; index++) {
                if (currentPosition >= position) {
                    return Math.ceil(index / this.getColumnPageSize())
                }
                currentPosition += widths[index]
            }
            return Math.ceil(widths.length / this.getColumnPageSize())
        };
        _proto4.getColumnPageSize = function() {
            return this.option("scrolling.columnPageSize")
        };
        _proto4._fireColumnsChanged = function() {
            var date = new Date;
            this.columnsChanged.fire({
                optionNames: {
                    all: true,
                    length: 1
                },
                changeTypes: {
                    columns: true,
                    virtualColumnsScrolling: true,
                    length: 2
                }
            });
            this._renderTime = new Date - date
        };
        _proto4.getScrollingTimeout = function() {
            var renderingThreshold = this.option("scrolling.columnRenderingThreshold");
            var renderAsync = this.option("scrolling.renderAsync");
            var scrollingTimeout = 0;
            if (!(0, _type.isDefined)(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {
                scrollingTimeout = this.option("scrolling.timeout")
            }
            return scrollingTimeout
        };
        _proto4.setScrollPosition = function(position) {
            var _this2 = this;
            var scrollingTimeout = this.getScrollingTimeout();
            if (scrollingTimeout > 0) {
                clearTimeout(this._changedTimeout);
                this._changedTimeout = setTimeout((function() {
                    _this2._setScrollPositionCore(position)
                }), scrollingTimeout)
            } else {
                this._setScrollPositionCore(position)
            }
        };
        _proto4.isVirtualMode = function() {
            return (0, _window.hasWindow)() && "virtual" === this.option("scrolling.columnRenderingMode")
        };
        _proto4.resize = function() {
            this._setScrollPositionCore(this._position)
        };
        _proto4._setScrollPositionCore = function(position) {
            if (this.isVirtualMode()) {
                var beginPageIndex = this.getBeginPageIndex(position);
                var endPageIndex = this.getEndPageIndex(position);
                var needColumnsChanged = position < this._position ? this._beginPageIndex > beginPageIndex : this._endPageIndex < endPageIndex;
                this._position = position;
                if (needColumnsChanged) {
                    this._beginPageIndex = beginPageIndex;
                    this._endPageIndex = endPageIndex;
                    this._fireColumnsChanged()
                }
            }
        };
        _proto4.getFixedColumns = function(rowIndex, isBase) {
            var fixedColumns = _Base2.prototype.getFixedColumns.call(this, rowIndex);
            if (this.isVirtualMode() && !isBase && fixedColumns.length) {
                var transparentColumnIndex = fixedColumns.map((function(c) {
                    return c.command
                })).indexOf("transparent");
                fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - _Base2.prototype.getFixedColumns.call(this).length + 1;
                return fixedColumns
            }
            return fixedColumns
        };
        _proto4._compileVisibleColumns = function(rowIndex, isBase) {
            var _a;
            if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {
                return _Base2.prototype._compileVisibleColumns.call(this, rowIndex)
            }
            if ((null === (_a = this._columns) || void 0 === _a ? void 0 : _a.length) && !(0, _type.isDefined)(this._beginPageIndex) && !(0, _type.isDefined)(this._endPageIndex)) {
                this._beginPageIndex = this.getBeginPageIndex(this._position);
                this._endPageIndex = this.getEndPageIndex(this._position)
            }
            var beginPageIndex = this._beginPageIndex;
            var endPageIndex = this._endPageIndex;
            var visibleColumnsHash = "".concat(rowIndex, "-").concat(beginPageIndex, "-").concat(endPageIndex);
            if (this._virtualVisibleColumns[visibleColumnsHash]) {
                return this._virtualVisibleColumns[visibleColumnsHash]
            }
            var visibleColumns = _Base2.prototype._compileVisibleColumns.call(this);
            var rowCount = this.getRowCount();
            var pageSize = this.getColumnPageSize();
            var startIndex = beginPageIndex * pageSize;
            var endIndex = endPageIndex * pageSize;
            var fixedColumns = this.getFixedColumns(void 0, true);
            var transparentColumnIndex = fixedColumns.map((function(c) {
                return c.command
            })).indexOf("transparent");
            var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;
            var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);
            var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);
            var beginWidth = getWidths(beginColumns).reduce((function(a, b) {
                return a + b
            }), 0);
            if (!beginWidth) {
                startIndex = 0
            }
            var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;
            var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);
            var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);
            var endWidth = getWidths(endColumns).reduce((function(a, b) {
                return a + b
            }), 0);
            if (!endWidth) {
                endIndex = visibleColumns.length
            }
            if (rowCount > 1 && "number" === typeof rowIndex) {
                var columnsInfo = [];
                for (var i = 0; i <= rowCount; i++) {
                    columnsInfo.push(_Base2.prototype._compileVisibleColumns.call(this, i))
                }
                beginFixedColumns = (0, _m_virtual_columns_core.createColumnsInfo)(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];
                endFixedColumns = (0, _m_virtual_columns_core.createColumnsInfo)(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];
                visibleColumns = (0, _m_virtual_columns_core.createColumnsInfo)(columnsInfo, startIndex, endIndex)[rowIndex] || []
            } else {
                visibleColumns = visibleColumns.slice(startIndex, endIndex)
            }
            if (beginWidth) {
                visibleColumns.unshift({
                    command: "virtual",
                    width: beginWidth
                });
                visibleColumns = beginFixedColumns.concat(visibleColumns)
            }
            if (endWidth) {
                visibleColumns.push({
                    command: "virtual",
                    width: endWidth
                });
                visibleColumns = visibleColumns.concat(endFixedColumns)
            }
            this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;
            return visibleColumns
        };
        _proto4.getColumnIndexOffset = function() {
            var offset = 0;
            if (this._beginPageIndex > 0) {
                var fixedColumns = this.getFixedColumns();
                var transparentColumnIndex = fixedColumns.map((function(c) {
                    return c.command
                })).indexOf("transparent");
                var leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;
                offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1
            }
            return offset > 0 ? offset : 0
        };
        return VirtualColumnsControllerExtender
    }(Base)
};
var virtualColumnsModule = {
    defaultOptions: function() {
        return {
            scrolling: {
                columnRenderingMode: "standard",
                columnPageSize: 5,
                columnRenderingThreshold: 300
            }
        }
    },
    extenders: {
        controllers: {
            columns: columns
        },
        views: {
            columnHeadersView: columnHeadersView,
            rowsView: rowsView
        }
    }
};
exports.virtualColumnsModule = virtualColumnsModule;
