import { Component, ContentChild, Input, ViewEncapsulation, } from '@angular/core';
import { Calendar } from '@fullcalendar/core';
import { CustomRenderingStore } from '@fullcalendar/core/internal';
import { OPTION_INPUT_NAMES, OPTION_IS_DEEP } from './options';
import { deepCopy, shallowCopy, mapHash } from './utils/obj';
import { deepEqual } from './utils/fast-deep-equal';
import * as i0 from "@angular/core";
import * as i1 from "./utils/offscreen-fragment.component";
import * as i2 from "./utils/transport-container.component";
import * as i3 from "@angular/common";
export class FullCalendarComponent {
    constructor(element, changeDetector) {
        this.element = element;
        this.calendar = null;
        this.optionSnapshot = {}; // for diffing
        this.customRenderingMap = new Map();
        this.templateMap = {};
        const customRenderingStore = new CustomRenderingStore();
        customRenderingStore.subscribe((customRenderingMap) => {
            this.customRenderingMap = customRenderingMap;
            this.customRenderingArray = undefined; // clear cache
            changeDetector.detectChanges();
        });
        this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);
        this.templateMap = this; // alias to this
    }
    ngAfterViewInit() {
        const { deepChangeDetection } = this;
        const options = {
            ...this.options,
            ...this.buildInputOptions(),
        };
        // initialize snapshot
        this.optionSnapshot = mapHash(options, (optionVal, optionName) => ((deepChangeDetection && OPTION_IS_DEEP[optionName])
            ? deepCopy(optionVal)
            : optionVal));
        this.calendar = new Calendar(this.element.nativeElement, {
            ...options,
            ...this.buildExtraOptions(),
        });
        this.calendar.render();
    }
    /*
    allows us to manually detect complex input changes, internal mutations to certain options.
    called before ngOnChanges. called much more often than ngOnChanges.
    */
    ngDoCheck() {
        if (this.calendar) { // not the initial render
            const { deepChangeDetection, optionSnapshot } = this;
            const newOptions = {
                ...this.options,
                ...this.buildInputOptions(),
            };
            const newProcessedOptions = {};
            let anyChanges = false;
            // detect adds and updates (and update snapshot)
            for (const optionName in newOptions) {
                if (newOptions.hasOwnProperty(optionName)) {
                    let optionVal = newOptions[optionName];
                    if (deepChangeDetection && OPTION_IS_DEEP[optionName]) {
                        if (!deepEqual(optionSnapshot[optionName], optionVal)) {
                            optionSnapshot[optionName] = deepCopy(optionVal);
                            anyChanges = true;
                            // trick FC into knowing about a nested change.
                            // TODO: future versions won't need this.
                            // can't use the previously-made deep copy because it blows away prototype-association.
                            optionVal = shallowCopy(optionVal);
                        }
                    }
                    else {
                        if (optionSnapshot[optionName] !== optionVal) {
                            optionSnapshot[optionName] = optionVal;
                            anyChanges = true;
                        }
                    }
                    newProcessedOptions[optionName] = optionVal;
                }
            }
            const oldOptionNames = Object.keys(optionSnapshot);
            // detect removals (and update snapshot)
            for (const optionName of oldOptionNames) {
                if (!(optionName in newOptions)) { // doesn't exist in new options?
                    delete optionSnapshot[optionName];
                    anyChanges = true;
                }
            }
            if (anyChanges) {
                this.calendar.pauseRendering();
                this.calendar.resetOptions({
                    ...newProcessedOptions,
                    ...this.buildExtraOptions(),
                });
            }
        }
    }
    ngAfterContentChecked() {
        if (this.calendar) { // too defensive?
            this.calendar.resumeRendering();
        }
    }
    ngOnDestroy() {
        if (this.calendar) { // too defensive?
            this.calendar.destroy();
            this.calendar = null;
        }
    }
    get customRenderings() {
        return this.customRenderingArray ||
            (this.customRenderingArray = [...this.customRenderingMap.values()]);
    }
    getApi() {
        return this.calendar;
    }
    buildInputOptions() {
        const options = {};
        for (const inputName of OPTION_INPUT_NAMES) {
            const inputValue = this[inputName];
            if (inputValue != null) { // exclude both null and undefined
                options[inputName] = inputValue;
            }
        }
        return options;
    }
    buildExtraOptions() {
        return {
            handleCustomRendering: this.handleCustomRendering,
            customRenderingMetaMap: this.templateMap,
            customRenderingReplacesEl: true,
        };
    }
}
FullCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FullCalendarComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FullCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: FullCalendarComponent, selector: "full-calendar", inputs: { options: "options", deepChangeDetection: "deepChangeDetection", events: "events", eventSources: "eventSources", resources: "resources" }, queries: [{ propertyName: "dayHeaderContent", first: true, predicate: ["dayHeaderContent"], descendants: true, static: true }, { propertyName: "dayCellContent", first: true, predicate: ["dayCellContent"], descendants: true, static: true }, { propertyName: "weekNumberContent", first: true, predicate: ["weekNumberContent"], descendants: true, static: true }, { propertyName: "nowIndicatorContent", first: true, predicate: ["nowIndicatorContent"], descendants: true, static: true }, { propertyName: "eventContent", first: true, predicate: ["eventContent"], descendants: true, static: true }, { propertyName: "slotLaneContent", first: true, predicate: ["slotLaneContent"], descendants: true, static: true }, { propertyName: "slotLabelContent", first: true, predicate: ["slotLabelContent"], descendants: true, static: true }, { propertyName: "allDayContent", first: true, predicate: ["allDayContent"], descendants: true, static: true }, { propertyName: "moreLinkContent", first: true, predicate: ["moreLinkContent"], descendants: true, static: true }, { propertyName: "noEventsContent", first: true, predicate: ["noEventsContent"], descendants: true, static: true }, { propertyName: "resourceAreaHeaderContent", first: true, predicate: ["resourceAreaHeaderContent"], descendants: true, static: true }, { propertyName: "resourceGroupLabelContent", first: true, predicate: ["resourceGroupLabelContent"], descendants: true, static: true }, { propertyName: "resourceLabelContent", first: true, predicate: ["resourceLabelContent"], descendants: true, static: true }, { propertyName: "resourceLaneContent", first: true, predicate: ["resourceLaneContent"], descendants: true, static: true }, { propertyName: "resourceGroupLaneContent", first: true, predicate: ["resourceGroupLaneContent"], descendants: true, static: true }], ngImport: i0, template: "<offscreen-fragment>\n  <transport-container *ngFor=\"let customRendering of customRenderings\"\n    [inPlaceOf]=\"customRendering.containerEl\"\n    [reportEl]=\"customRendering.reportNewContainerEl\"\n    [elTag]=\"customRendering.elTag\"\n    [elClasses]=\"customRendering.elClasses\"\n    [elStyle]=\"customRendering.elStyle\"\n    [elAttrs]=\"customRendering.elAttrs\"\n    [template]=\"templateMap[customRendering.generatorName]!\"\n    [renderProps]=\"customRendering.renderProps\"\n  ></transport-container>\n</offscreen-fragment>\n", components: [{ type: i1.OffscreenFragmentComponent, selector: "offscreen-fragment" }, { type: i2.TransportContainerComponent, selector: "transport-container", inputs: ["inPlaceOf", "reportEl", "elTag", "elClasses", "elStyle", "elAttrs", "template", "renderProps"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FullCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'full-calendar', encapsulation: ViewEncapsulation.None // the styles are root-level, not scoped within the component
                    , template: "<offscreen-fragment>\n  <transport-container *ngFor=\"let customRendering of customRenderings\"\n    [inPlaceOf]=\"customRendering.containerEl\"\n    [reportEl]=\"customRendering.reportNewContainerEl\"\n    [elTag]=\"customRendering.elTag\"\n    [elClasses]=\"customRendering.elClasses\"\n    [elStyle]=\"customRendering.elStyle\"\n    [elAttrs]=\"customRendering.elAttrs\"\n    [template]=\"templateMap[customRendering.generatorName]!\"\n    [renderProps]=\"customRendering.renderProps\"\n  ></transport-container>\n</offscreen-fragment>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { options: [{
                type: Input
            }], deepChangeDetection: [{
                type: Input
            }], events: [{
                type: Input
            }], eventSources: [{
                type: Input
            }], resources: [{
                type: Input
            }], dayHeaderContent: [{
                type: ContentChild,
                args: ['dayHeaderContent', { static: true }]
            }], dayCellContent: [{
                type: ContentChild,
                args: ['dayCellContent', { static: true }]
            }], weekNumberContent: [{
                type: ContentChild,
                args: ['weekNumberContent', { static: true }]
            }], nowIndicatorContent: [{
                type: ContentChild,
                args: ['nowIndicatorContent', { static: true }]
            }], eventContent: [{
                type: ContentChild,
                args: ['eventContent', { static: true }]
            }], slotLaneContent: [{
                type: ContentChild,
                args: ['slotLaneContent', { static: true }]
            }], slotLabelContent: [{
                type: ContentChild,
                args: ['slotLabelContent', { static: true }]
            }], allDayContent: [{
                type: ContentChild,
                args: ['allDayContent', { static: true }]
            }], moreLinkContent: [{
                type: ContentChild,
                args: ['moreLinkContent', { static: true }]
            }], noEventsContent: [{
                type: ContentChild,
                args: ['noEventsContent', { static: true }]
            }], resourceAreaHeaderContent: [{
                type: ContentChild,
                args: ['resourceAreaHeaderContent', { static: true }]
            }], resourceGroupLabelContent: [{
                type: ContentChild,
                args: ['resourceGroupLabelContent', { static: true }]
            }], resourceLabelContent: [{
                type: ContentChild,
                args: ['resourceLabelContent', { static: true }]
            }], resourceLaneContent: [{
                type: ContentChild,
                args: ['resourceLaneContent', { static: true }]
            }], resourceGroupLaneContent: [{
                type: ContentChild,
                args: ['resourceGroupLaneContent', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,