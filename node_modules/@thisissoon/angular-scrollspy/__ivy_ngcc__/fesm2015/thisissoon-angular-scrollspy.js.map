{"version":3,"file":"thisissoon-angular-scrollspy.js","sources":["@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-item/scroll-spy-item.directive.ts","@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-service/scroll-spy.service.ts","@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy/scroll-spy.directive.ts","@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy-section/scroll-spy-section.component.ts","@thisissoon/angular-scrollspy/app/scroll-spy/scroll-spy.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n/**\n * A directive used to add an `active` class to a nav item\n * when the section is in the viewport\n *\n * @example\n * ```html\n * <a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a>\n * ```\n *\n */\n@Directive({\n  selector: '[snScrollSpyItem]',\n})\nexport class ScrollSpyItemDirective {\n  /**\n   * True if the nav item is the active item in the `items` list\n   * for `ScrollSpyDirective` instance\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @HostBinding('class.active')\n  public active = false;\n  /**\n   * ID of `ScrollSpyDirective` instance\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public for: string;\n  /**\n   * Hash for section to link to\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public href: string;\n  /**\n   * If true means the section is in the viewport\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public inViewport = false;\n  /**\n   * Id of section that links navigates to\n   *\n   * @readonly\n   * @memberof ScrollSpyItemDirective\n   */\n  public get section(): string {\n    return this.href.replace('#', '');\n  }\n  /**\n   * Creates an instance of ScrollSpyItemDirective.\n   * @memberof ScrollSpyItemDirective\n   */\n  constructor(private cdRef: ChangeDetectorRef) {}\n  /**\n   * Manually trigger change detection\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public detectChanges(): void {\n    this.cdRef.detectChanges();\n  }\n}\n","import { Injectable, QueryList } from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { Spy } from '../shared/spy.model';\n\n/**\n * Service that stores a list of `Spy`'s and the state\n * of their nav items `inViewport` and `active` state\n *\n */\n@Injectable()\nexport class ScrollSpyService {\n  /**\n   * List of `Spy`'s\n   *\n   * @memberof ScrollSpyService\n   */\n  public spys: Spy[] = [];\n  /**\n   * Stores requests to add items to spy when spy hasn't been created\n   * yet. Once spy has been added then request will be made again.\n   *\n   * @memberof ScrollSpyService\n   */\n  public buffer: any[] = [];\n  /**\n   * Add spy to list of `spys`\n   *\n   * @memberof ScrollSpyService\n   */\n  public addSpy(id: string, items: QueryList<ScrollSpyItemDirective>): void {\n    this.spys.push({ id, items });\n    const buffer = this.buffer.filter(i => i.spyId === id);\n    this.buffer = this.buffer.filter(i => i.spyId !== id);\n    buffer.forEach(i =>\n      this.setSpySectionStatus(i.sectionId, i.spyId, i.inViewport),\n    );\n  }\n  /**\n   * Remove spy from list of `spys`\n   *\n   * @memberof ScrollSpyService\n   */\n  public removeSpy(id: string): void {\n    const i = this.spys.findIndex(s => s.id === id);\n    this.spys.splice(i, 1);\n  }\n  /**\n   * Set the `inViewport` status for a spy item then sets the active\n   * to true for the first item in the list that has `inViewport`\n   * set to true\n   *\n   * @memberof ScrollSpyService\n   */\n  public setSpySectionStatus(\n    sectionId: string,\n    spyId: string,\n    inViewport: boolean,\n  ): void {\n    const spy = this.spys.find(s => s.id === spyId);\n    if (!spy) {\n      this.buffer.push({ sectionId, spyId, inViewport });\n      return;\n    }\n    const item = spy.items.find(i => i.section === sectionId);\n    if (!item) {\n      return;\n    }\n\n    item.inViewport = inViewport;\n    const firstInViewport = spy.items.filter(i => i.inViewport)[0];\n    spy.items.forEach(i => (i.active = false));\n\n    if (firstInViewport) {\n      firstInViewport.active = true;\n      firstInViewport.detectChanges();\n    }\n  }\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterViewInit,\n  Input,\n  OnDestroy,\n} from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * Adds `active` class to navigation links when section is in the viewport.\n * Used in conjuction with `snScrollItem` directive which should be added\n * to anchor links in the nav\n *\n * @example\n * ```\n * <ul role=\"navigation\" snScrollSpy id=\"foo\">\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section2\">Section 2</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section3\">Section 3</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section4\">Section 4</a></li>\n * </ul>\n * ```\n *\n */\n@Directive({\n  selector: '[snScrollSpy]',\n})\nexport class ScrollSpyDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Collection of `ScrollSpyItem`. They are the list of\n   * nav items.\n   *\n   * @memberof ScrollSpyDirective\n   */\n  @ContentChildren(ScrollSpyItemDirective)\n  public items: QueryList<ScrollSpyItemDirective>;\n  /**\n   * ID of scrollSpy instance\n   *\n   * @memberof ScrollSpyDirective\n   */\n  @Input()\n  public id: string;\n  /**\n   * Creates an instance of ScrollSpyDirective.\n   * @memberof ScrollSpyDirective\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) {}\n  /**\n   * Adds spy to list of spys in `ScrollSpyService`\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngAfterViewInit(): void {\n    this.scrollSpySvc.addSpy(this.id, this.items);\n  }\n  /**\n   * Remove spy from list of spys when directive is destroyed\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngOnDestroy(): void {\n    this.scrollSpySvc.removeSpy(this.id);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * A component to wrap section content within that will update the\n * `ScrollSpyService` when it's in view\n *\n * @example\n * ```html\n *  <sn-scroll-spy-section id=\"section1\" for=\"foo\">\n *    ...\n *  </sn-scroll-spy-section>\n * ```\n */\n@Component({\n  selector: 'sn-scroll-spy-section',\n  templateUrl: './scroll-spy-section.component.html',\n  styleUrls: ['./scroll-spy-section.component.scss'],\n})\nexport class ScrollSpySectionComponent {\n  /**\n   * Identifies the section\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public id: string;\n  /**\n   * Specifies which `ScrollSpy` instance to update\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public for: string;\n  /**\n   * Creates an instance of ScrollSpySectionComponent.\n   * @memberof ScrollSpySectionComponent\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) {}\n  /**\n   * Updates `ScrollSpy` section when element enters/leaves viewport\n   *\n   * @memberof ScrollSpySectionComponent\n   */\n  public onInViewportChange(inViewport: boolean): void {\n    this.scrollSpySvc.setSpySectionStatus(this.id, this.for, inViewport);\n  }\n}\n","import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { InViewportModule } from '@thisissoon/angular-inviewport';\n\nimport { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';\nimport { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';\nimport { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';\n\nconst directives: any[] = [ScrollSpyDirective, ScrollSpyItemDirective];\n\nconst components: any[] = [ScrollSpySectionComponent];\n\nconst providers: Provider[] = [ScrollSpyService];\n\n/**\n * A simple lightweight library for Angular which automatically\n * updates links to indicate the currently active section in the viewport\n *\n */\n@NgModule({\n  imports: [InViewportModule],\n  declarations: [...directives, ...components],\n  exports: [...directives, ...components],\n})\nexport class ScrollSpyModule {\n  /**\n   * Specify a static method for root module to ensure providers are\n   * only provided once but allows the module to still be imported\n   * into other modules without reproviding services.\n   *\n   * @memberof ScrollSpyModule\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [...providers],\n    };\n  }\n}\n"]}