{"version":3,"file":"in-viewport.directive.d.ts","sources":["in-viewport.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, AfterViewInit, OnInit } from '@angular/core';\n/**\n * A simple lightweight library for Angular with that detects when an\n * element is within the browsers viewport and adds a `in-viewport` or\n * `not-in-viewport` class to the element.\n *\n * @example\n * ```html\n * <p\n *  class=\"foo\"\n *  snInViewport\n *  (inViewportChange)=\"myEventHandler($event)\">\n *  Amet tempor excepteur occaecat nulla.\n * </p>\n * ```\n */\nexport declare class InViewportDirective implements AfterViewInit, OnDestroy, OnInit {\n    private el;\n    private window;\n    private inViewport;\n    private hasIntersectionObserver;\n    inViewportOptions: IntersectionObserverInit;\n    inViewportChange: EventEmitter<boolean>;\n    observer: IntersectionObserver;\n    readonly isInViewport: boolean;\n    readonly isNotInViewport: boolean;\n    constructor(el: ElementRef, window: Window);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    intersectionObserverCallback(entries: IntersectionObserverEntry[]): void;\n    private intersectionObserverFeatureDetection;\n}\n"]}